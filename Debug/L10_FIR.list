
L10_FIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006bb4  08006bb4  00016bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d44  08006d44  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006d44  08006d44  00016d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d4c  08006d4c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d4c  08006d4c  00016d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d50  08006d50  00016d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  200001e8  08006f3c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  08006f3c  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f68  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003643  00000000  00000000  00039180  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001498  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c0  00000000  00000000  0003dc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264d0  00000000  00000000  0003ef20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012e78  00000000  00000000  000653f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eec0b  00000000  00000000  00078268  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166e73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a0  00000000  00000000  00166ef0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006b9c 	.word	0x08006b9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08006b9c 	.word	0x08006b9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]

  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	ed93 7a06 	vldr	s14, [r3, #24]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	edd3 7a07 	vldr	s15, [r3, #28]
 80005c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80005d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0 * S->Kd);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	edd3 7a06 	vldr	s15, [r3, #24]
 80005e0:	eeb1 7a67 	vneg.f32	s14, s15
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80005ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80005ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6a1a      	ldr	r2, [r3, #32]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d006      	beq.n	8000614 <arm_pid_init_f32+0x64>
  {
    /* Clear the state buffer.  The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	330c      	adds	r3, #12
 800060a:	220c      	movs	r2, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 fe00 	bl	8006214 <memset>
  }

}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f94b 	bl	80008bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f806 	bl	8000638 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f005 f94c 	bl	80058c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x54>)
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <HAL_InitTick+0x58>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4619      	mov	r1, r3
 800064a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000652:	fbb2 f3f3 	udiv	r3, r2, r3
 8000656:	4618      	mov	r0, r3
 8000658:	f000 f965 	bl	8000926 <HAL_SYSTICK_Config>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	e00e      	b.n	8000684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d80a      	bhi.n	8000682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800066c:	2200      	movs	r2, #0
 800066e:	6879      	ldr	r1, [r7, #4]
 8000670:	f04f 30ff 	mov.w	r0, #4294967295
 8000674:	f000 f92d 	bl	80008d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <HAL_InitTick+0x5c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000014 	.word	0x20000014
 8000690:	20000004 	.word	0x20000004
 8000694:	20000000 	.word	0x20000000

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000004 	.word	0x20000004
 80006bc:	20000218 	.word	0x20000218

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	20000218 	.word	0x20000218

080006d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e0:	f7ff ffee 	bl	80006c0 <HAL_GetTick>
 80006e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f0:	d005      	beq.n	80006fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_Delay+0x40>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	461a      	mov	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006fe:	bf00      	nop
 8000700:	f7ff ffde 	bl	80006c0 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	68fa      	ldr	r2, [r7, #12]
 800070c:	429a      	cmp	r2, r3
 800070e:	d8f7      	bhi.n	8000700 <HAL_Delay+0x28>
  {
  }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000004 	.word	0x20000004

0800071c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <__NVIC_SetPriorityGrouping+0x40>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000738:	4013      	ands	r3, r2
 800073a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	4313      	orrs	r3, r2
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x40>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	05fa0000 	.word	0x05fa0000

08000764 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <__NVIC_GetPriorityGrouping+0x18>)
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0a1b      	lsrs	r3, r3, #8
 800076e:	f003 0307 	and.w	r3, r3, #7
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	db0b      	blt.n	80007aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	f003 021f 	and.w	r2, r3, #31
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <__NVIC_EnableIRQ+0x38>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	095b      	lsrs	r3, r3, #5
 80007a0:	2001      	movs	r0, #1
 80007a2:	fa00 f202 	lsl.w	r2, r0, r2
 80007a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000e100 	.word	0xe000e100

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000888:	d301      	bcc.n	800088e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800088a:	2301      	movs	r3, #1
 800088c:	e00f      	b.n	80008ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <SysTick_Config+0x40>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000896:	210f      	movs	r1, #15
 8000898:	f04f 30ff 	mov.w	r0, #4294967295
 800089c:	f7ff ff8e 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <SysTick_Config+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x40>)
 80008a8:	2207      	movs	r2, #7
 80008aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ff29 	bl	800071c <__NVIC_SetPriorityGrouping>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b086      	sub	sp, #24
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008e4:	f7ff ff3e 	bl	8000764 <__NVIC_GetPriorityGrouping>
 80008e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	68b9      	ldr	r1, [r7, #8]
 80008ee:	6978      	ldr	r0, [r7, #20]
 80008f0:	f7ff ff8e 	bl	8000810 <NVIC_EncodePriority>
 80008f4:	4602      	mov	r2, r0
 80008f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fa:	4611      	mov	r1, r2
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	bf00      	nop
 8000904:	3718      	adds	r7, #24
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff31 	bl	8000780 <__NVIC_EnableIRQ>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffa2 	bl	8000878 <SysTick_Config>
 8000934:	4603      	mov	r3, r0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d004      	beq.n	800095c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2280      	movs	r2, #128	; 0x80
 8000956:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000958:	2301      	movs	r3, #1
 800095a:	e00c      	b.n	8000976 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2205      	movs	r2, #5
 8000960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0201 	bic.w	r2, r2, #1
 8000972:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000974:	2300      	movs	r3, #0
}
 8000976:	4618      	mov	r0, r3
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000984:	b480      	push	{r7}
 8000986:	b089      	sub	sp, #36	; 0x24
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
 80009a2:	e175      	b.n	8000c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80009a4:	2201      	movs	r2, #1
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	697a      	ldr	r2, [r7, #20]
 80009b4:	4013      	ands	r3, r2
 80009b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	429a      	cmp	r2, r3
 80009be:	f040 8164 	bne.w	8000c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x4e>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b12      	cmp	r3, #18
 80009d0:	d123      	bne.n	8000a1a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	08da      	lsrs	r2, r3, #3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3208      	adds	r2, #8
 80009da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43db      	mvns	r3, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4013      	ands	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	691a      	ldr	r2, [r3, #16]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	69b9      	ldr	r1, [r7, #24]
 8000a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	2203      	movs	r2, #3
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	69ba      	ldr	r2, [r7, #24]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f003 0203 	and.w	r2, r3, #3
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d00b      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d007      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a62:	2b11      	cmp	r3, #17
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b12      	cmp	r3, #18
 8000a6c:	d130      	bne.n	8000ad0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	69ba      	ldr	r2, [r7, #24]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	091b      	lsrs	r3, r3, #4
 8000aba:	f003 0201 	and.w	r2, r3, #1
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	005b      	lsls	r3, r3, #1
 8000ada:	2203      	movs	r2, #3
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	69ba      	ldr	r2, [r7, #24]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69ba      	ldr	r2, [r7, #24]
 8000afe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	f000 80be 	beq.w	8000c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a64      	ldr	r2, [pc, #400]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <HAL_GPIO_Init+0x320>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b26:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <HAL_GPIO_Init+0x324>)
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	089b      	lsrs	r3, r3, #2
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a57      	ldr	r2, [pc, #348]	; (8000cac <HAL_GPIO_Init+0x328>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d037      	beq.n	8000bc2 <HAL_GPIO_Init+0x23e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a56      	ldr	r2, [pc, #344]	; (8000cb0 <HAL_GPIO_Init+0x32c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d031      	beq.n	8000bbe <HAL_GPIO_Init+0x23a>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a55      	ldr	r2, [pc, #340]	; (8000cb4 <HAL_GPIO_Init+0x330>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d02b      	beq.n	8000bba <HAL_GPIO_Init+0x236>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a54      	ldr	r2, [pc, #336]	; (8000cb8 <HAL_GPIO_Init+0x334>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d025      	beq.n	8000bb6 <HAL_GPIO_Init+0x232>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a53      	ldr	r2, [pc, #332]	; (8000cbc <HAL_GPIO_Init+0x338>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d01f      	beq.n	8000bb2 <HAL_GPIO_Init+0x22e>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4a52      	ldr	r2, [pc, #328]	; (8000cc0 <HAL_GPIO_Init+0x33c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d019      	beq.n	8000bae <HAL_GPIO_Init+0x22a>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a51      	ldr	r2, [pc, #324]	; (8000cc4 <HAL_GPIO_Init+0x340>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d013      	beq.n	8000baa <HAL_GPIO_Init+0x226>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4a50      	ldr	r2, [pc, #320]	; (8000cc8 <HAL_GPIO_Init+0x344>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d00d      	beq.n	8000ba6 <HAL_GPIO_Init+0x222>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ccc <HAL_GPIO_Init+0x348>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d007      	beq.n	8000ba2 <HAL_GPIO_Init+0x21e>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a4e      	ldr	r2, [pc, #312]	; (8000cd0 <HAL_GPIO_Init+0x34c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_GPIO_Init+0x21a>
 8000b9a:	2309      	movs	r3, #9
 8000b9c:	e012      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	e010      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	e00e      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	e00c      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000baa:	2306      	movs	r3, #6
 8000bac:	e00a      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e008      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x240>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	69fa      	ldr	r2, [r7, #28]
 8000bc6:	f002 0203 	and.w	r2, r2, #3
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd4:	4934      	ldr	r1, [pc, #208]	; (8000ca8 <HAL_GPIO_Init+0x324>)
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000be2:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c0c:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c30:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c36:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	4013      	ands	r3, r2
 8000c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c5a:	4a1e      	ldr	r2, [pc, #120]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c84:	4a13      	ldr	r2, [pc, #76]	; (8000cd4 <HAL_GPIO_Init+0x350>)
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	2b0f      	cmp	r3, #15
 8000c94:	f67f ae86 	bls.w	80009a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3724      	adds	r7, #36	; 0x24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40020800 	.word	0x40020800
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40021400 	.word	0x40021400
 8000cc4:	40021800 	.word	0x40021800
 8000cc8:	40021c00 	.word	0x40021c00
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40022400 	.word	0x40022400
 8000cd4:	40013c00 	.word	0x40013c00

08000cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce8:	787b      	ldrb	r3, [r7, #1]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000cf4:	e003      	b.n	8000cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	041a      	lsls	r2, r3, #16
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	619a      	str	r2, [r3, #24]
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d18:	695a      	ldr	r2, [r3, #20]
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d28:	88fb      	ldrh	r3, [r7, #6]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f004 fda8 	bl	8005880 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013c00 	.word	0x40013c00

08000d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e07f      	b.n	8000e4e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d106      	bne.n	8000d68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f004 fbe8 	bl	8005538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2224      	movs	r2, #36	; 0x24
 8000d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 0201 	bic.w	r2, r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d107      	bne.n	8000db6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689a      	ldr	r2, [r3, #8]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	e006      	b.n	8000dc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689a      	ldr	r2, [r3, #8]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d104      	bne.n	8000dd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6859      	ldr	r1, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_I2C_Init+0x11c>)
 8000de2:	430b      	orrs	r3, r1
 8000de4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691a      	ldr	r2, [r3, #16]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	ea42 0103 	orr.w	r1, r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	021a      	lsls	r2, r3, #8
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69d9      	ldr	r1, [r3, #28]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1a      	ldr	r2, [r3, #32]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	02008000 	.word	0x02008000

08000e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	817b      	strh	r3, [r7, #10]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b20      	cmp	r3, #32
 8000e7a:	f040 80da 	bne.w	8001032 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d101      	bne.n	8000e8c <HAL_I2C_Master_Transmit+0x30>
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e0d3      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e94:	f7ff fc14 	bl	80006c0 <HAL_GetTick>
 8000e98:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2319      	movs	r3, #25
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f9e6 	bl	8001278 <I2C_WaitOnFlagUntilTimeout>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e0be      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2221      	movs	r2, #33	; 0x21
 8000eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	893a      	ldrh	r2, [r7, #8]
 8000ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2bff      	cmp	r3, #255	; 0xff
 8000ee6:	d90e      	bls.n	8000f06 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	22ff      	movs	r2, #255	; 0xff
 8000eec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	8979      	ldrh	r1, [r7, #10]
 8000ef6:	4b51      	ldr	r3, [pc, #324]	; (800103c <HAL_I2C_Master_Transmit+0x1e0>)
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f000 fb48 	bl	8001594 <I2C_TransferConfig>
 8000f04:	e06c      	b.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	8979      	ldrh	r1, [r7, #10]
 8000f18:	4b48      	ldr	r3, [pc, #288]	; (800103c <HAL_I2C_Master_Transmit+0x1e0>)
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 fb37 	bl	8001594 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f26:	e05b      	b.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	6a39      	ldr	r1, [r7, #32]
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 f9e3 	bl	80012f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e07b      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f64:	3b01      	subs	r3, #1
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d034      	beq.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d130      	bne.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2200      	movs	r2, #0
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f000 f975 	bl	8001278 <I2C_WaitOnFlagUntilTimeout>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e04d      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	2bff      	cmp	r3, #255	; 0xff
 8000fa0:	d90e      	bls.n	8000fc0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	8979      	ldrh	r1, [r7, #10]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f000 faeb 	bl	8001594 <I2C_TransferConfig>
 8000fbe:	e00f      	b.n	8000fe0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	8979      	ldrh	r1, [r7, #10]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 fada 	bl	8001594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d19e      	bne.n	8000f28 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	6a39      	ldr	r1, [r7, #32]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f9c2 	bl	8001378 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e01a      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2220      	movs	r2, #32
 8001004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6859      	ldr	r1, [r3, #4]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_I2C_Master_Transmit+0x1e4>)
 8001012:	400b      	ands	r3, r1
 8001014:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2220      	movs	r2, #32
 800101a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001032:	2302      	movs	r3, #2
  }
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	80002000 	.word	0x80002000
 8001040:	fe00e800 	.word	0xfe00e800

08001044 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	461a      	mov	r2, r3
 8001050:	460b      	mov	r3, r1
 8001052:	817b      	strh	r3, [r7, #10]
 8001054:	4613      	mov	r3, r2
 8001056:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b20      	cmp	r3, #32
 8001062:	f040 80db 	bne.w	800121c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <HAL_I2C_Master_Receive+0x30>
 8001070:	2302      	movs	r3, #2
 8001072:	e0d4      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800107c:	f7ff fb20 	bl	80006c0 <HAL_GetTick>
 8001080:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2319      	movs	r3, #25
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f000 f8f2 	bl	8001278 <I2C_WaitOnFlagUntilTimeout>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e0bf      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2222      	movs	r2, #34	; 0x22
 80010a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2210      	movs	r2, #16
 80010aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	893a      	ldrh	r2, [r7, #8]
 80010be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2200      	movs	r2, #0
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	2bff      	cmp	r3, #255	; 0xff
 80010ce:	d90e      	bls.n	80010ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	8979      	ldrh	r1, [r7, #10]
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <HAL_I2C_Master_Receive+0x1e4>)
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010e6:	68f8      	ldr	r0, [r7, #12]
 80010e8:	f000 fa54 	bl	8001594 <I2C_TransferConfig>
 80010ec:	e06d      	b.n	80011ca <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	8979      	ldrh	r1, [r7, #10]
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <HAL_I2C_Master_Receive+0x1e4>)
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 fa43 	bl	8001594 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800110e:	e05c      	b.n	80011ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	6a39      	ldr	r1, [r7, #32]
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f96b 	bl	80013f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e07c      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800115a:	b29b      	uxth	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d034      	beq.n	80011ca <HAL_I2C_Master_Receive+0x186>
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001164:	2b00      	cmp	r3, #0
 8001166:	d130      	bne.n	80011ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	6a3b      	ldr	r3, [r7, #32]
 800116e:	2200      	movs	r2, #0
 8001170:	2180      	movs	r1, #128	; 0x80
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 f880 	bl	8001278 <I2C_WaitOnFlagUntilTimeout>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e04d      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001186:	b29b      	uxth	r3, r3
 8001188:	2bff      	cmp	r3, #255	; 0xff
 800118a:	d90e      	bls.n	80011aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001196:	b2da      	uxtb	r2, r3
 8001198:	8979      	ldrh	r1, [r7, #10]
 800119a:	2300      	movs	r3, #0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 f9f6 	bl	8001594 <I2C_TransferConfig>
 80011a8:	e00f      	b.n	80011ca <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	8979      	ldrh	r1, [r7, #10]
 80011bc:	2300      	movs	r3, #0
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f9e5 	bl	8001594 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d19d      	bne.n	8001110 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	6a39      	ldr	r1, [r7, #32]
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f8cd 	bl	8001378 <I2C_WaitOnSTOPFlagUntilTimeout>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e01a      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2220      	movs	r2, #32
 80011ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6859      	ldr	r1, [r3, #4]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <HAL_I2C_Master_Receive+0x1e8>)
 80011fc:	400b      	ands	r3, r1
 80011fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2220      	movs	r2, #32
 8001204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	e000      	b.n	800121e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800121c:	2302      	movs	r3, #2
  }
}
 800121e:	4618      	mov	r0, r3
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	80002400 	.word	0x80002400
 800122c:	fe00e800 	.word	0xfe00e800

08001230 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b02      	cmp	r3, #2
 8001244:	d103      	bne.n	800124e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	2b01      	cmp	r3, #1
 800125a:	d007      	beq.n	800126c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	619a      	str	r2, [r3, #24]
  }
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	4613      	mov	r3, r2
 8001286:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001288:	e022      	b.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001290:	d01e      	beq.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001292:	f7ff fa15 	bl	80006c0 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d302      	bcc.n	80012a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d113      	bne.n	80012d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ac:	f043 0220 	orr.w	r2, r3, #32
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e00f      	b.n	80012f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4013      	ands	r3, r2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	429a      	cmp	r2, r3
 80012de:	bf0c      	ite	eq
 80012e0:	2301      	moveq	r3, #1
 80012e2:	2300      	movne	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461a      	mov	r2, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d0cd      	beq.n	800128a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001304:	e02c      	b.n	8001360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f8dc 	bl	80014c8 <I2C_IsAcknowledgeFailed>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e02a      	b.n	8001370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001320:	d01e      	beq.n	8001360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001322:	f7ff f9cd 	bl	80006c0 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	68ba      	ldr	r2, [r7, #8]
 800132e:	429a      	cmp	r2, r3
 8001330:	d302      	bcc.n	8001338 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d113      	bne.n	8001360 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133c:	f043 0220 	orr.w	r2, r3, #32
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2220      	movs	r2, #32
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e007      	b.n	8001370 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b02      	cmp	r3, #2
 800136c:	d1cb      	bne.n	8001306 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001384:	e028      	b.n	80013d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f89c 	bl	80014c8 <I2C_IsAcknowledgeFailed>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e026      	b.n	80013e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800139a:	f7ff f991 	bl	80006c0 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d302      	bcc.n	80013b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d113      	bne.n	80013d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f043 0220 	orr.w	r2, r3, #32
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2220      	movs	r2, #32
 80013c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e007      	b.n	80013e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0320 	and.w	r3, r3, #32
 80013e2:	2b20      	cmp	r3, #32
 80013e4:	d1cf      	bne.n	8001386 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80013fc:	e055      	b.n	80014aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f000 f860 	bl	80014c8 <I2C_IsAcknowledgeFailed>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e053      	b.n	80014ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	2b20      	cmp	r3, #32
 800141e:	d129      	bne.n	8001474 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b04      	cmp	r3, #4
 800142c:	d105      	bne.n	800143a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e03f      	b.n	80014ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2220      	movs	r2, #32
 8001440:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800144e:	400b      	ands	r3, r1
 8001450:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2200      	movs	r2, #0
 8001456:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2220      	movs	r2, #32
 800145c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e022      	b.n	80014ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001474:	f7ff f924 	bl	80006c0 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	d302      	bcc.n	800148a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d10f      	bne.n	80014aa <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f043 0220 	orr.w	r2, r3, #32
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2220      	movs	r2, #32
 800149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d1a2      	bne.n	80013fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	fe00e800 	.word	0xfe00e800

080014c8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	2b10      	cmp	r3, #16
 80014e0:	d151      	bne.n	8001586 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014e2:	e022      	b.n	800152a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ea:	d01e      	beq.n	800152a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014ec:	f7ff f8e8 	bl	80006c0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d302      	bcc.n	8001502 <I2C_IsAcknowledgeFailed+0x3a>
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d113      	bne.n	800152a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f043 0220 	orr.w	r2, r3, #32
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2220      	movs	r2, #32
 8001512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e02e      	b.n	8001588 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b20      	cmp	r3, #32
 8001536:	d1d5      	bne.n	80014e4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2210      	movs	r2, #16
 800153e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2220      	movs	r2, #32
 8001546:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff fe71 	bl	8001230 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <I2C_IsAcknowledgeFailed+0xc8>)
 800155a:	400b      	ands	r3, r1
 800155c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f043 0204 	orr.w	r2, r3, #4
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2220      	movs	r2, #32
 800156e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	fe00e800 	.word	0xfe00e800

08001594 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	817b      	strh	r3, [r7, #10]
 80015a2:	4613      	mov	r3, r2
 80015a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	0d5b      	lsrs	r3, r3, #21
 80015b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80015b4:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <I2C_TransferConfig+0x58>)
 80015b6:	430b      	orrs	r3, r1
 80015b8:	43db      	mvns	r3, r3
 80015ba:	ea02 0103 	and.w	r1, r2, r3
 80015be:	897b      	ldrh	r3, [r7, #10]
 80015c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015c4:	7a7b      	ldrb	r3, [r7, #9]
 80015c6:	041b      	lsls	r3, r3, #16
 80015c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	431a      	orrs	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	03ff63ff 	.word	0x03ff63ff

080015f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b20      	cmp	r3, #32
 8001604:	d138      	bne.n	8001678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001610:	2302      	movs	r3, #2
 8001612:	e032      	b.n	800167a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2224      	movs	r2, #36	; 0x24
 8001620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6819      	ldr	r1, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0201 	orr.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001678:	2302      	movs	r3, #2
  }
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001696:	b2db      	uxtb	r3, r3
 8001698:	2b20      	cmp	r3, #32
 800169a:	d139      	bne.n	8001710 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d101      	bne.n	80016aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016a6:	2302      	movs	r3, #2
 80016a8:	e033      	b.n	8001712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2224      	movs	r2, #36	; 0x24
 80016b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2220      	movs	r2, #32
 8001700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	e000      	b.n	8001712 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001710:	2302      	movs	r3, #2
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800171e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001720:	b08f      	sub	sp, #60	; 0x3c
 8001722:	af0a      	add	r7, sp, #40	; 0x28
 8001724:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e10a      	b.n	8001946 <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f004 fbf7 	bl	8005f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2203      	movs	r2, #3
 800174e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f003 f8cc 	bl	80048f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	687e      	ldr	r6, [r7, #4]
 8001764:	466d      	mov	r5, sp
 8001766:	f106 0410 	add.w	r4, r6, #16
 800176a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800176c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001770:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001772:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001776:	e885 0003 	stmia.w	r5, {r0, r1}
 800177a:	1d33      	adds	r3, r6, #4
 800177c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800177e:	6838      	ldr	r0, [r7, #0]
 8001780:	f003 f860 	bl	8004844 <USB_CoreInit>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2202      	movs	r2, #2
 800178e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0d7      	b.n	8001946 <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f003 f8ba 	bl	8004916 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
 80017a6:	e04a      	b.n	800183e <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80017a8:	7bfa      	ldrb	r2, [r7, #15]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	333d      	adds	r3, #61	; 0x3d
 80017b8:	2201      	movs	r2, #1
 80017ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80017bc:	7bfa      	ldrb	r2, [r7, #15]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	333c      	adds	r3, #60	; 0x3c
 80017cc:	7bfa      	ldrb	r2, [r7, #15]
 80017ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	b298      	uxth	r0, r3
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3342      	adds	r3, #66	; 0x42
 80017e4:	4602      	mov	r2, r0
 80017e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	333f      	adds	r3, #63	; 0x3f
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80017fc:	7bfa      	ldrb	r2, [r7, #15]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	3344      	adds	r3, #68	; 0x44
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	1a9b      	subs	r3, r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	440b      	add	r3, r1
 800181e:	3348      	adds	r3, #72	; 0x48
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001824:	7bfa      	ldrb	r2, [r7, #15]
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	3350      	adds	r3, #80	; 0x50
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	3301      	adds	r3, #1
 800183c:	73fb      	strb	r3, [r7, #15]
 800183e:	7bfa      	ldrb	r2, [r7, #15]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3af      	bcc.n	80017a8 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e044      	b.n	80018d8 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800184e:	7bfa      	ldrb	r2, [r7, #15]
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	4613      	mov	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	1a9b      	subs	r3, r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	440b      	add	r3, r1
 800185c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001876:	7bfa      	ldrb	r2, [r7, #15]
 8001878:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	00db      	lsls	r3, r3, #3
 8001882:	1a9b      	subs	r3, r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018a6:	7bfa      	ldrb	r2, [r7, #15]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018bc:	7bfa      	ldrb	r2, [r7, #15]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	3301      	adds	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	7bfa      	ldrb	r2, [r7, #15]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d3b5      	bcc.n	800184e <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	687e      	ldr	r6, [r7, #4]
 80018ea:	466d      	mov	r5, sp
 80018ec:	f106 0410 	add.w	r4, r6, #16
 80018f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001900:	1d33      	adds	r3, r6, #4
 8001902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001904:	6838      	ldr	r0, [r7, #0]
 8001906:	f003 f831 	bl	800496c <USB_DevInit>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e014      	b.n	8001946 <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	2b01      	cmp	r3, #1
 8001932:	d102      	bne.n	800193a <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f80b 	bl	8001950 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f9f1 	bl	8004d26 <USB_DevDisconnect>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001950 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_PCDEx_ActivateLPM+0x44>)
 8001980:	4313      	orrs	r3, r2
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	10000003 	.word	0x10000003

08001998 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40007000 	.word	0x40007000

080019b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e25c      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8087 	beq.w	8001aea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4b96      	ldr	r3, [pc, #600]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019e8:	4b93      	ldr	r3, [pc, #588]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
 80019f4:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x130>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d168      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e236      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x7a>
 8001a24:	4b84      	ldr	r3, [pc, #528]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a83      	ldr	r2, [pc, #524]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x9c>
 8001a3a:	4b7f      	ldr	r3, [pc, #508]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7e      	ldr	r2, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b7c      	ldr	r3, [pc, #496]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a7b      	ldr	r2, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0xc0>
 8001a5e:	4b76      	ldr	r3, [pc, #472]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a75      	ldr	r2, [pc, #468]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b73      	ldr	r3, [pc, #460]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a72      	ldr	r2, [pc, #456]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xd8>
 8001a78:	4b6f      	ldr	r3, [pc, #444]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6e      	ldr	r2, [pc, #440]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b6c      	ldr	r3, [pc, #432]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a6b      	ldr	r2, [pc, #428]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7fe fe12 	bl	80006c0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7fe fe0e 	bl	80006c0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1ea      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b61      	ldr	r3, [pc, #388]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe8>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fdfe 	bl	80006c0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7fe fdfa 	bl	80006c0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1d6      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x110>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d069      	beq.n	8001bca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x190>
 8001b0e:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1aa      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b41      	ldr	r3, [pc, #260]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	493d      	ldr	r1, [pc, #244]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e040      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d023      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a38      	ldr	r2, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fdb0 	bl	80006c0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b64:	f7fe fdac 	bl	80006c0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e188      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b76:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4929      	ldr	r1, [pc, #164]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	600b      	str	r3, [r1, #0]
 8001b96:	e018      	b.n	8001bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7fe fd8c 	bl	80006c0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bac:	f7fe fd88 	bl	80006c0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e164      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d038      	beq.n	8001c48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d019      	beq.n	8001c12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bde:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be2:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7fe fd69 	bl	80006c0 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf2:	f7fe fd65 	bl	80006c0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e141      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x23a>
 8001c10:	e01a      	b.n	8001c48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_RCC_OscConfig+0x280>)
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe fd4f 	bl	80006c0 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c26:	f7fe fd4b 	bl	80006c0 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d903      	bls.n	8001c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e127      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
 8001c38:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b94      	ldr	r3, [pc, #592]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1ee      	bne.n	8001c26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a4 	beq.w	8001d9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a8a      	ldr	r2, [pc, #552]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7e:	4b85      	ldr	r3, [pc, #532]	; (8001e94 <HAL_RCC_OscConfig+0x4dc>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c8a:	4b82      	ldr	r3, [pc, #520]	; (8001e94 <HAL_RCC_OscConfig+0x4dc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a81      	ldr	r2, [pc, #516]	; (8001e94 <HAL_RCC_OscConfig+0x4dc>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7fe fd13 	bl	80006c0 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7fe fd0f 	bl	80006c0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0eb      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb0:	4b78      	ldr	r3, [pc, #480]	; (8001e94 <HAL_RCC_OscConfig+0x4dc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x31a>
 8001cc4:	4b72      	ldr	r3, [pc, #456]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd0:	e02d      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x33c>
 8001cda:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a6c      	ldr	r2, [pc, #432]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf2:	e01c      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x35e>
 8001cfc:	4b64      	ldr	r3, [pc, #400]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d00:	4a63      	ldr	r2, [pc, #396]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6713      	str	r3, [r2, #112]	; 0x70
 8001d08:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	4a60      	ldr	r2, [pc, #384]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	; 0x70
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x376>
 8001d16:	4b5e      	ldr	r3, [pc, #376]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
 8001d22:	4b5b      	ldr	r3, [pc, #364]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d26:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d015      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7fe fcc3 	bl	80006c0 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fcbf 	bl	80006c0 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e099      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCC_OscConfig+0x386>
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7fe fcad 	bl	80006c0 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe fca9 	bl	80006c0 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e083      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	4b43      	ldr	r3, [pc, #268]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b3f      	ldr	r3, [pc, #252]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a3e      	ldr	r2, [pc, #248]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d06f      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b08      	cmp	r3, #8
 8001db0:	d067      	beq.n	8001e82 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d149      	bne.n	8001e4e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a34      	ldr	r2, [pc, #208]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fc7b 	bl	80006c0 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe fc77 	bl	80006c0 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e053      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	019b      	lsls	r3, r3, #6
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	085b      	lsrs	r3, r3, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	061b      	lsls	r3, r3, #24
 8001e10:	4313      	orrs	r3, r2
 8001e12:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e18:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7fe fc4b 	bl	80006c0 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fc47 	bl	80006c0 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e023      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e40:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x476>
 8001e4c:	e01b      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a0f      	ldr	r2, [pc, #60]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fc31 	bl	80006c0 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fc2d 	bl	80006c0 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e009      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x4d8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x4aa>
 8001e80:	e001      	b.n	8001e86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e000      	b.n	8001e88 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3718      	adds	r7, #24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40007000 	.word	0x40007000

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e0ce      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b69      	ldr	r3, [pc, #420]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d910      	bls.n	8001ee0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 020f 	bic.w	r2, r3, #15
 8001ec6:	4964      	ldr	r1, [pc, #400]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0b6      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d020      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef8:	4b58      	ldr	r3, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	4a57      	ldr	r2, [pc, #348]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f10:	4b52      	ldr	r3, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	4a51      	ldr	r2, [pc, #324]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	494c      	ldr	r1, [pc, #304]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d040      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d115      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e07d      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e071      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6a:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e069      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f023 0203 	bic.w	r2, r3, #3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4935      	ldr	r1, [pc, #212]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8c:	f7fe fb98 	bl	80006c0 <HAL_GetTick>
 8001f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	e00a      	b.n	8001faa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f94:	f7fe fb94 	bl	80006c0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e051      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001faa:	4b2c      	ldr	r3, [pc, #176]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 020c 	and.w	r2, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d1eb      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbc:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d210      	bcs.n	8001fec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fca:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 020f 	bic.w	r2, r3, #15
 8001fd2:	4921      	ldr	r1, [pc, #132]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b1f      	ldr	r3, [pc, #124]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e030      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d008      	beq.n	800200a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	4915      	ldr	r1, [pc, #84]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002006:	4313      	orrs	r3, r2
 8002008:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	490d      	ldr	r1, [pc, #52]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202a:	f000 f81d 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800202e:	4601      	mov	r1, r0
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4a09      	ldr	r2, [pc, #36]	; (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	5cd3      	ldrb	r3, [r2, r3]
 800203e:	fa21 f303 	lsr.w	r3, r1, r3
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <HAL_RCC_ClockConfig+0x1cc>)
 8002044:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002046:	2000      	movs	r0, #0
 8002048:	f7fe faf6 	bl	8000638 <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023c00 	.word	0x40023c00
 800205c:	40023800 	.word	0x40023800
 8002060:	08006bec 	.word	0x08006bec
 8002064:	20000014 	.word	0x20000014

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207e:	4b63      	ldr	r3, [pc, #396]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	2b04      	cmp	r3, #4
 8002088:	d007      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x32>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d008      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x38>
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80b4 	bne.w	80021fc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b5e      	ldr	r3, [pc, #376]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002096:	60bb      	str	r3, [r7, #8]
       break;
 8002098:	e0b3      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b5e      	ldr	r3, [pc, #376]	; (8002214 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800209c:	60bb      	str	r3, [r7, #8]
      break;
 800209e:	e0b0      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b5a      	ldr	r3, [pc, #360]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d04a      	beq.n	800214c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	f04f 0400 	mov.w	r4, #0
 80020c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	ea03 0501 	and.w	r5, r3, r1
 80020cc:	ea04 0602 	and.w	r6, r4, r2
 80020d0:	4629      	mov	r1, r5
 80020d2:	4632      	mov	r2, r6
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	f04f 0400 	mov.w	r4, #0
 80020dc:	0154      	lsls	r4, r2, #5
 80020de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020e2:	014b      	lsls	r3, r1, #5
 80020e4:	4619      	mov	r1, r3
 80020e6:	4622      	mov	r2, r4
 80020e8:	1b49      	subs	r1, r1, r5
 80020ea:	eb62 0206 	sbc.w	r2, r2, r6
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	f04f 0400 	mov.w	r4, #0
 80020f6:	0194      	lsls	r4, r2, #6
 80020f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020fc:	018b      	lsls	r3, r1, #6
 80020fe:	1a5b      	subs	r3, r3, r1
 8002100:	eb64 0402 	sbc.w	r4, r4, r2
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	00e2      	lsls	r2, r4, #3
 800210e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002112:	00d9      	lsls	r1, r3, #3
 8002114:	460b      	mov	r3, r1
 8002116:	4614      	mov	r4, r2
 8002118:	195b      	adds	r3, r3, r5
 800211a:	eb44 0406 	adc.w	r4, r4, r6
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	0262      	lsls	r2, r4, #9
 8002128:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800212c:	0259      	lsls	r1, r3, #9
 800212e:	460b      	mov	r3, r1
 8002130:	4614      	mov	r4, r2
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f04f 0400 	mov.w	r4, #0
 800213c:	461a      	mov	r2, r3
 800213e:	4623      	mov	r3, r4
 8002140:	f7fe f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8002144:	4603      	mov	r3, r0
 8002146:	460c      	mov	r4, r1
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e049      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	099b      	lsrs	r3, r3, #6
 8002152:	f04f 0400 	mov.w	r4, #0
 8002156:	f240 11ff 	movw	r1, #511	; 0x1ff
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	ea03 0501 	and.w	r5, r3, r1
 8002162:	ea04 0602 	and.w	r6, r4, r2
 8002166:	4629      	mov	r1, r5
 8002168:	4632      	mov	r2, r6
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	f04f 0400 	mov.w	r4, #0
 8002172:	0154      	lsls	r4, r2, #5
 8002174:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002178:	014b      	lsls	r3, r1, #5
 800217a:	4619      	mov	r1, r3
 800217c:	4622      	mov	r2, r4
 800217e:	1b49      	subs	r1, r1, r5
 8002180:	eb62 0206 	sbc.w	r2, r2, r6
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	f04f 0400 	mov.w	r4, #0
 800218c:	0194      	lsls	r4, r2, #6
 800218e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002192:	018b      	lsls	r3, r1, #6
 8002194:	1a5b      	subs	r3, r3, r1
 8002196:	eb64 0402 	sbc.w	r4, r4, r2
 800219a:	f04f 0100 	mov.w	r1, #0
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	00e2      	lsls	r2, r4, #3
 80021a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021a8:	00d9      	lsls	r1, r3, #3
 80021aa:	460b      	mov	r3, r1
 80021ac:	4614      	mov	r4, r2
 80021ae:	195b      	adds	r3, r3, r5
 80021b0:	eb44 0406 	adc.w	r4, r4, r6
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	02a2      	lsls	r2, r4, #10
 80021be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021c2:	0299      	lsls	r1, r3, #10
 80021c4:	460b      	mov	r3, r1
 80021c6:	4614      	mov	r4, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	4621      	mov	r1, r4
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f04f 0400 	mov.w	r4, #0
 80021d2:	461a      	mov	r2, r3
 80021d4:	4623      	mov	r3, r4
 80021d6:	f7fe f86b 	bl	80002b0 <__aeabi_uldivmod>
 80021da:	4603      	mov	r3, r0
 80021dc:	460c      	mov	r4, r1
 80021de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	3301      	adds	r3, #1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	60bb      	str	r3, [r7, #8]
      break;
 80021fa:	e002      	b.n	8002202 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021fe:	60bb      	str	r3, [r7, #8]
      break;
 8002200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002202:	68bb      	ldr	r3, [r7, #8]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	00f42400 	.word	0x00f42400
 8002214:	007a1200 	.word	0x007a1200

08002218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800221c:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_GetHCLKFreq+0x14>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000014 	.word	0x20000014

08002230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002234:	f7ff fff0 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002238:	4601      	mov	r1, r0
 800223a:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	fa21 f303 	lsr.w	r3, r1, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	08006bfc 	.word	0x08006bfc

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800225c:	f7ff ffdc 	bl	8002218 <HAL_RCC_GetHCLKFreq>
 8002260:	4601      	mov	r1, r0
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0b5b      	lsrs	r3, r3, #13
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4a03      	ldr	r2, [pc, #12]	; (800227c <HAL_RCC_GetPCLK2Freq+0x24>)
 800226e:	5cd3      	ldrb	r3, [r2, r3]
 8002270:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40023800 	.word	0x40023800
 800227c:	08006bfc 	.word	0x08006bfc

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d012      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022a8:	4b69      	ldr	r3, [pc, #420]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a68      	ldr	r2, [pc, #416]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022bc:	4964      	ldr	r1, [pc, #400]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d017      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	4959      	ldr	r1, [pc, #356]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022f8:	d101      	bne.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022fa:	2301      	movs	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002306:	2301      	movs	r3, #1
 8002308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d017      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002316:	4b4e      	ldr	r3, [pc, #312]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	494a      	ldr	r1, [pc, #296]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002352:	2301      	movs	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 808b 	beq.w	800247a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	4a39      	ldr	r2, [pc, #228]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6413      	str	r3, [r2, #64]	; 0x40
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a34      	ldr	r2, [pc, #208]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe f99a 	bl	80006c0 <HAL_GetTick>
 800238c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe f996 	bl	80006c0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e355      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d035      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d02e      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023d6:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023da:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a1a      	ldr	r2, [pc, #104]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d114      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe f95e 	bl	80006c0 <HAL_GetTick>
 8002404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002406:	e00a      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002408:	f7fe f95a 	bl	80006c0 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e317      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0ee      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002436:	d111      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002446:	400b      	ands	r3, r1
 8002448:	4901      	ldr	r1, [pc, #4]	; (8002450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
 800244e:	e00b      	b.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002450:	40023800 	.word	0x40023800
 8002454:	40007000 	.word	0x40007000
 8002458:	0ffffcff 	.word	0x0ffffcff
 800245c:	4bb0      	ldr	r3, [pc, #704]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4aaf      	ldr	r2, [pc, #700]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002466:	6093      	str	r3, [r2, #8]
 8002468:	4bad      	ldr	r3, [pc, #692]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800246a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	49aa      	ldr	r1, [pc, #680]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002476:	4313      	orrs	r3, r2
 8002478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0310 	and.w	r3, r3, #16
 8002482:	2b00      	cmp	r3, #0
 8002484:	d010      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002486:	4ba6      	ldr	r3, [pc, #664]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248c:	4aa4      	ldr	r2, [pc, #656]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002496:	4ba2      	ldr	r3, [pc, #648]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	499f      	ldr	r1, [pc, #636]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b9a      	ldr	r3, [pc, #616]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024c2:	4997      	ldr	r1, [pc, #604]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e4:	498e      	ldr	r1, [pc, #568]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024f8:	4b89      	ldr	r3, [pc, #548]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002506:	4986      	ldr	r1, [pc, #536]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800251a:	4b81      	ldr	r3, [pc, #516]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800251c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	497d      	ldr	r1, [pc, #500]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253c:	4b78      	ldr	r3, [pc, #480]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800253e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002542:	f023 0203 	bic.w	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4975      	ldr	r1, [pc, #468]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800255e:	4b70      	ldr	r3, [pc, #448]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	f023 020c 	bic.w	r2, r3, #12
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800256c:	496c      	ldr	r1, [pc, #432]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002580:	4b67      	ldr	r3, [pc, #412]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	4964      	ldr	r1, [pc, #400]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a2:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b0:	495b      	ldr	r1, [pc, #364]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00a      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c4:	4b56      	ldr	r3, [pc, #344]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	4953      	ldr	r1, [pc, #332]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025e6:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	494a      	ldr	r1, [pc, #296]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002608:	4b45      	ldr	r3, [pc, #276]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	4942      	ldr	r1, [pc, #264]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00a      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800262a:	4b3d      	ldr	r3, [pc, #244]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002638:	4939      	ldr	r1, [pc, #228]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800263a:	4313      	orrs	r3, r2
 800263c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00a      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800264c:	4b34      	ldr	r3, [pc, #208]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800265a:	4931      	ldr	r1, [pc, #196]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d011      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800267c:	4928      	ldr	r1, [pc, #160]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026bc:	4918      	ldr	r1, [pc, #96]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00b      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026e0:	490f      	ldr	r1, [pc, #60]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d005      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f6:	f040 80d8 	bne.w	80028aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a08      	ldr	r2, [pc, #32]	; (8002720 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002700:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002706:	f7fd ffdb 	bl	80006c0 <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800270e:	f7fd ffd7 	bl	80006c0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d903      	bls.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e196      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8002720:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002724:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d021      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	2b00      	cmp	r3, #0
 8002742:	d11d      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002744:	4b64      	ldr	r3, [pc, #400]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274a:	0c1b      	lsrs	r3, r3, #16
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002752:	4b61      	ldr	r3, [pc, #388]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	0e1b      	lsrs	r3, r3, #24
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	019a      	lsls	r2, r3, #6
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	061b      	lsls	r3, r3, #24
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	071b      	lsls	r3, r3, #28
 8002778:	4957      	ldr	r1, [pc, #348]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002790:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d02e      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027aa:	d129      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027ac:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ba:	4b47      	ldr	r3, [pc, #284]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027c0:	0f1b      	lsrs	r3, r3, #28
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	019a      	lsls	r2, r3, #6
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	431a      	orrs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	071b      	lsls	r3, r3, #28
 80027e0:	493d      	ldr	r1, [pc, #244]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027ee:	f023 021f 	bic.w	r2, r3, #31
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	3b01      	subs	r3, #1
 80027f8:	4937      	ldr	r1, [pc, #220]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01d      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002812:	0e1b      	lsrs	r3, r3, #24
 8002814:	f003 030f 	and.w	r3, r3, #15
 8002818:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800281c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002820:	0f1b      	lsrs	r3, r3, #28
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	019a      	lsls	r2, r3, #6
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	041b      	lsls	r3, r3, #16
 8002834:	431a      	orrs	r2, r3
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	431a      	orrs	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	071b      	lsls	r3, r3, #28
 8002840:	4925      	ldr	r1, [pc, #148]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002842:	4313      	orrs	r3, r2
 8002844:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d011      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	019a      	lsls	r2, r3, #6
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	061b      	lsls	r3, r3, #24
 8002868:	431a      	orrs	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	071b      	lsls	r3, r3, #28
 8002870:	4919      	ldr	r1, [pc, #100]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800287e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002884:	f7fd ff1c 	bl	80006c0 <HAL_GetTick>
 8002888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800288c:	f7fd ff18 	bl	80006c0 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b64      	cmp	r3, #100	; 0x64
 8002898:	d901      	bls.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0d7      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f040 80cd 	bne.w	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a08      	ldr	r2, [pc, #32]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80028b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028be:	f7fd feff 	bl	80006c0 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028c6:	f7fd fefb 	bl	80006c0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b64      	cmp	r3, #100	; 0x64
 80028d2:	d903      	bls.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0ba      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80028d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e8:	d0ed      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002906:	2b00      	cmp	r3, #0
 8002908:	d02e      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d12a      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	0c1b      	lsrs	r3, r3, #16
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002920:	4b4d      	ldr	r3, [pc, #308]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002926:	0f1b      	lsrs	r3, r3, #28
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	019a      	lsls	r2, r3, #6
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	061b      	lsls	r3, r3, #24
 8002940:	431a      	orrs	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	071b      	lsls	r3, r3, #28
 8002946:	4944      	ldr	r1, [pc, #272]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800294e:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002950:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002954:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	493d      	ldr	r1, [pc, #244]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002978:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800297c:	d11d      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	0e1b      	lsrs	r3, r3, #24
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	0f1b      	lsrs	r3, r3, #28
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	019a      	lsls	r2, r3, #6
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	041b      	lsls	r3, r3, #16
 80029a6:	431a      	orrs	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	061b      	lsls	r3, r3, #24
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	071b      	lsls	r3, r3, #28
 80029b2:	4929      	ldr	r1, [pc, #164]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d028      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029cc:	0e1b      	lsrs	r3, r3, #24
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	019a      	lsls	r2, r3, #6
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	4917      	ldr	r1, [pc, #92]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	4911      	ldr	r1, [pc, #68]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a0e      	ldr	r2, [pc, #56]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a24:	f7fd fe4c 	bl	80006c0 <HAL_GetTick>
 8002a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a2c:	f7fd fe48 	bl	80006c0 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e007      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4a:	d1ef      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01d      	b.n	8002aaa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f003 f8d4 	bl	8005c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fbc8 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_TIM_Base_Start_IT+0x50>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b06      	cmp	r3, #6
 8002adc:	d00b      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x42>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d007      	beq.n	8002af6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	00010007 	.word	0x00010007

08002b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e01d      	b.n	8002b56 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f815 	bl	8002b5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fb72 	bl	8003230 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 feea 	bl	8003960 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_TIM_PWM_Start+0x7c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_TIM_PWM_Start+0x2c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a16      	ldr	r2, [pc, #88]	; (8002bf4 <HAL_TIM_PWM_Start+0x80>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_PWM_Start+0x30>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_TIM_PWM_Start+0x32>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <HAL_TIM_PWM_Start+0x84>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2b06      	cmp	r3, #6
 8002bca:	d00b      	beq.n	8002be4 <HAL_TIM_PWM_Start+0x70>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd2:	d007      	beq.n	8002be4 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40010000 	.word	0x40010000
 8002bf4:	40010400 	.word	0x40010400
 8002bf8:	00010007 	.word	0x00010007

08002bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d122      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d11b      	bne.n	8002c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0202 	mvn.w	r2, #2
 8002c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 fad8 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002c44:	e005      	b.n	8002c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 faca 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fadb 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d122      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f003 0304 	and.w	r3, r3, #4
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d11b      	bne.n	8002cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0204 	mvn.w	r2, #4
 8002c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 faae 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002c98:	e005      	b.n	8002ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 faa0 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 fab1 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d122      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0208 	mvn.w	r2, #8
 8002cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 fa84 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002cec:	e005      	b.n	8002cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 fa76 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 fa87 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d122      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	d11b      	bne.n	8002d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0210 	mvn.w	r2, #16
 8002d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2208      	movs	r2, #8
 8002d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa5a 	bl	80031f4 <HAL_TIM_IC_CaptureCallback>
 8002d40:	e005      	b.n	8002d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fa4c 	bl	80031e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa5d 	bl	8003208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10e      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0201 	mvn.w	r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f002 fd4a 	bl	8005814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8a:	2b80      	cmp	r3, #128	; 0x80
 8002d8c:	d10e      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b80      	cmp	r3, #128	; 0x80
 8002d9a:	d107      	bne.n	8002dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fe66 	bl	8003a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d10e      	bne.n	8002dda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 fe59 	bl	8003a8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d10e      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d107      	bne.n	8002e06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa0b 	bl	800321c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d10e      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d107      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0220 	mvn.w	r2, #32
 8002e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fe19 	bl	8003a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
	...

08002e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e105      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2202      	movs	r2, #2
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b14      	cmp	r3, #20
 8002e6a:	f200 80f0 	bhi.w	800304e <HAL_TIM_PWM_ConfigChannel+0x212>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002ec9 	.word	0x08002ec9
 8002e78:	0800304f 	.word	0x0800304f
 8002e7c:	0800304f 	.word	0x0800304f
 8002e80:	0800304f 	.word	0x0800304f
 8002e84:	08002f09 	.word	0x08002f09
 8002e88:	0800304f 	.word	0x0800304f
 8002e8c:	0800304f 	.word	0x0800304f
 8002e90:	0800304f 	.word	0x0800304f
 8002e94:	08002f4b 	.word	0x08002f4b
 8002e98:	0800304f 	.word	0x0800304f
 8002e9c:	0800304f 	.word	0x0800304f
 8002ea0:	0800304f 	.word	0x0800304f
 8002ea4:	08002f8b 	.word	0x08002f8b
 8002ea8:	0800304f 	.word	0x0800304f
 8002eac:	0800304f 	.word	0x0800304f
 8002eb0:	0800304f 	.word	0x0800304f
 8002eb4:	08002fcd 	.word	0x08002fcd
 8002eb8:	0800304f 	.word	0x0800304f
 8002ebc:	0800304f 	.word	0x0800304f
 8002ec0:	0800304f 	.word	0x0800304f
 8002ec4:	0800300d 	.word	0x0800300d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa4e 	bl	8003370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0204 	bic.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      break;
 8002f06:	e0a3      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 faa0 	bl	8003454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	619a      	str	r2, [r3, #24]
      break;
 8002f48:	e082      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 faf7 	bl	8003544 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0208 	orr.w	r2, r2, #8
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	61da      	str	r2, [r3, #28]
      break;
 8002f88:	e062      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fb4d 	bl	8003630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
      break;
 8002fca:	e041      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb84 	bl	80036e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0208 	orr.w	r2, r2, #8
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800300a:	e021      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fbb6 	bl	8003784 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800304c:	e000      	b.n	8003050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800304e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIM_ConfigClockSource+0x18>
 8003080:	2302      	movs	r3, #2
 8003082:	e0a6      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x166>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4b4f      	ldr	r3, [pc, #316]	; (80031dc <HAL_TIM_ConfigClockSource+0x170>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	d067      	beq.n	800318c <HAL_TIM_ConfigClockSource+0x120>
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d80b      	bhi.n	80030d8 <HAL_TIM_ConfigClockSource+0x6c>
 80030c0:	2b10      	cmp	r3, #16
 80030c2:	d073      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x140>
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d802      	bhi.n	80030ce <HAL_TIM_ConfigClockSource+0x62>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d06f      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80030cc:	e078      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d06c      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x140>
 80030d2:	2b30      	cmp	r3, #48	; 0x30
 80030d4:	d06a      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80030d6:	e073      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030d8:	2b70      	cmp	r3, #112	; 0x70
 80030da:	d00d      	beq.n	80030f8 <HAL_TIM_ConfigClockSource+0x8c>
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d804      	bhi.n	80030ea <HAL_TIM_ConfigClockSource+0x7e>
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d033      	beq.n	800314c <HAL_TIM_ConfigClockSource+0xe0>
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d041      	beq.n	800316c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80030e8:	e06a      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ee:	d066      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x152>
 80030f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f4:	d017      	beq.n	8003126 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030f6:	e063      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6818      	ldr	r0, [r3, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f000 fc0a 	bl	8003920 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800311a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	609a      	str	r2, [r3, #8]
      break;
 8003124:	e04c      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6899      	ldr	r1, [r3, #8]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f000 fbf3 	bl	8003920 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003148:	609a      	str	r2, [r3, #8]
      break;
 800314a:	e039      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6818      	ldr	r0, [r3, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	461a      	mov	r2, r3
 800315a:	f000 fb67 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2150      	movs	r1, #80	; 0x50
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fbc0 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 800316a:	e029      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6859      	ldr	r1, [r3, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	461a      	mov	r2, r3
 800317a:	f000 fb86 	bl	800388a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2160      	movs	r1, #96	; 0x60
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fbb0 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 800318a:	e019      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	6859      	ldr	r1, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	461a      	mov	r2, r3
 800319a:	f000 fb47 	bl	800382c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2140      	movs	r1, #64	; 0x40
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fba0 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 80031aa:	e009      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f000 fb97 	bl	80038ea <TIM_ITRx_SetConfig>
      break;
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80031be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	fffeff88 	.word	0xfffeff88

080031e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a40      	ldr	r2, [pc, #256]	; (8003344 <TIM_Base_SetConfig+0x114>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <TIM_Base_SetConfig+0x40>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800324e:	d00f      	beq.n	8003270 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a3d      	ldr	r2, [pc, #244]	; (8003348 <TIM_Base_SetConfig+0x118>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00b      	beq.n	8003270 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a3c      	ldr	r2, [pc, #240]	; (800334c <TIM_Base_SetConfig+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <TIM_Base_SetConfig+0x120>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3a      	ldr	r2, [pc, #232]	; (8003354 <TIM_Base_SetConfig+0x124>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d108      	bne.n	8003282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2f      	ldr	r2, [pc, #188]	; (8003344 <TIM_Base_SetConfig+0x114>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02b      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003290:	d027      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2c      	ldr	r2, [pc, #176]	; (8003348 <TIM_Base_SetConfig+0x118>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d023      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2b      	ldr	r2, [pc, #172]	; (800334c <TIM_Base_SetConfig+0x11c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01f      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2a      	ldr	r2, [pc, #168]	; (8003350 <TIM_Base_SetConfig+0x120>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01b      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a29      	ldr	r2, [pc, #164]	; (8003354 <TIM_Base_SetConfig+0x124>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d017      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a28      	ldr	r2, [pc, #160]	; (8003358 <TIM_Base_SetConfig+0x128>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a27      	ldr	r2, [pc, #156]	; (800335c <TIM_Base_SetConfig+0x12c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a26      	ldr	r2, [pc, #152]	; (8003360 <TIM_Base_SetConfig+0x130>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <TIM_Base_SetConfig+0x134>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a24      	ldr	r2, [pc, #144]	; (8003368 <TIM_Base_SetConfig+0x138>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a23      	ldr	r2, [pc, #140]	; (800336c <TIM_Base_SetConfig+0x13c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <TIM_Base_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_Base_SetConfig+0xf8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <TIM_Base_SetConfig+0x124>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d103      	bne.n	8003330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	615a      	str	r2, [r3, #20]
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40010000 	.word	0x40010000
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40010400 	.word	0x40010400
 8003358:	40014000 	.word	0x40014000
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	40001800 	.word	0x40001800
 8003368:	40001c00 	.word	0x40001c00
 800336c:	40002000 	.word	0x40002000

08003370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	f023 0201 	bic.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <TIM_OC1_SetConfig+0xd8>)
 800339c:	4013      	ands	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f023 0302 	bic.w	r3, r3, #2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <TIM_OC1_SetConfig+0xdc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_OC1_SetConfig+0x64>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <TIM_OC1_SetConfig+0xe0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0308 	bic.w	r3, r3, #8
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a16      	ldr	r2, [pc, #88]	; (800344c <TIM_OC1_SetConfig+0xdc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC1_SetConfig+0x8e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a15      	ldr	r2, [pc, #84]	; (8003450 <TIM_OC1_SetConfig+0xe0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d111      	bne.n	8003422 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	bf00      	nop
 800343e:	371c      	adds	r7, #28
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	fffeff8f 	.word	0xfffeff8f
 800344c:	40010000 	.word	0x40010000
 8003450:	40010400 	.word	0x40010400

08003454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	f023 0210 	bic.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4b2e      	ldr	r3, [pc, #184]	; (8003538 <TIM_OC2_SetConfig+0xe4>)
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	021b      	lsls	r3, r3, #8
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a23      	ldr	r2, [pc, #140]	; (800353c <TIM_OC2_SetConfig+0xe8>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d003      	beq.n	80034bc <TIM_OC2_SetConfig+0x68>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <TIM_OC2_SetConfig+0xec>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d10d      	bne.n	80034d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a18      	ldr	r2, [pc, #96]	; (800353c <TIM_OC2_SetConfig+0xe8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <TIM_OC2_SetConfig+0x94>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <TIM_OC2_SetConfig+0xec>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d113      	bne.n	8003510 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	feff8fff 	.word	0xfeff8fff
 800353c:	40010000 	.word	0x40010000
 8003540:	40010400 	.word	0x40010400

08003544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <TIM_OC3_SetConfig+0xe0>)
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800358c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	021b      	lsls	r3, r3, #8
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a22      	ldr	r2, [pc, #136]	; (8003628 <TIM_OC3_SetConfig+0xe4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d003      	beq.n	80035aa <TIM_OC3_SetConfig+0x66>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a21      	ldr	r2, [pc, #132]	; (800362c <TIM_OC3_SetConfig+0xe8>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10d      	bne.n	80035c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a17      	ldr	r2, [pc, #92]	; (8003628 <TIM_OC3_SetConfig+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_OC3_SetConfig+0x92>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a16      	ldr	r2, [pc, #88]	; (800362c <TIM_OC3_SetConfig+0xe8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d113      	bne.n	80035fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	fffeff8f 	.word	0xfffeff8f
 8003628:	40010000 	.word	0x40010000
 800362c:	40010400 	.word	0x40010400

08003630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <TIM_OC4_SetConfig+0xa4>)
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800367a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	031b      	lsls	r3, r3, #12
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <TIM_OC4_SetConfig+0xa8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d003      	beq.n	8003698 <TIM_OC4_SetConfig+0x68>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <TIM_OC4_SetConfig+0xac>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d109      	bne.n	80036ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	feff8fff 	.word	0xfeff8fff
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40010400 	.word	0x40010400

080036e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <TIM_OC5_SetConfig+0x98>)
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003720:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a12      	ldr	r2, [pc, #72]	; (800377c <TIM_OC5_SetConfig+0x9c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_OC5_SetConfig+0x5e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a11      	ldr	r2, [pc, #68]	; (8003780 <TIM_OC5_SetConfig+0xa0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003744:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	4313      	orrs	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	fffeff8f 	.word	0xfffeff8f
 800377c:	40010000 	.word	0x40010000
 8003780:	40010400 	.word	0x40010400

08003784 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4b1c      	ldr	r3, [pc, #112]	; (8003820 <TIM_OC6_SetConfig+0x9c>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	021b      	lsls	r3, r3, #8
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	051b      	lsls	r3, r3, #20
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a13      	ldr	r2, [pc, #76]	; (8003824 <TIM_OC6_SetConfig+0xa0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_OC6_SetConfig+0x60>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <TIM_OC6_SetConfig+0xa4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d109      	bne.n	80037f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	feff8fff 	.word	0xfeff8fff
 8003824:	40010000 	.word	0x40010000
 8003828:	40010400 	.word	0x40010400

0800382c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f023 0201 	bic.w	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 030a 	bic.w	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800388a:	b480      	push	{r7}
 800388c:	b087      	sub	sp, #28
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	f023 0210 	bic.w	r2, r3, #16
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	031b      	lsls	r3, r3, #12
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	4313      	orrs	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	621a      	str	r2, [r3, #32]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b085      	sub	sp, #20
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003900:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	f043 0307 	orr.w	r3, r3, #7
 800390c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	609a      	str	r2, [r3, #8]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800393a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	431a      	orrs	r2, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	609a      	str	r2, [r3, #8]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003960:	b480      	push	{r7}
 8003962:	b087      	sub	sp, #28
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 031f 	and.w	r3, r3, #31
 8003972:	2201      	movs	r2, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	43db      	mvns	r3, r3
 8003982:	401a      	ands	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1a      	ldr	r2, [r3, #32]
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	fa01 f303 	lsl.w	r3, r1, r3
 8003998:	431a      	orrs	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e045      	b.n	8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a22:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	40010400 	.word	0x40010400

08003a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e040      	b.n	8003b34 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f002 f98e 	bl	8005de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9fe 	bl	8003ee0 <UART_SetConfig>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e022      	b.n	8003b34 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fc96 	bl	8004428 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fd1d 	bl	800456c <UART_CheckIdleState>
 8003b32:	4603      	mov	r3, r0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	f040 808a 	bne.w	8003c68 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_UART_Receive_IT+0x24>
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e082      	b.n	8003c6a <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Receive_IT+0x36>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e07b      	b.n	8003c6a <HAL_UART_Receive_IT+0x12e>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d10e      	bne.n	8003bbe <HAL_UART_Receive_IT+0x82>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d105      	bne.n	8003bb4 <HAL_UART_Receive_IT+0x78>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bb2:	e02d      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	22ff      	movs	r2, #255	; 0xff
 8003bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bbc:	e028      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10d      	bne.n	8003be2 <HAL_UART_Receive_IT+0xa6>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d104      	bne.n	8003bd8 <HAL_UART_Receive_IT+0x9c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22ff      	movs	r2, #255	; 0xff
 8003bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd6:	e01b      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	227f      	movs	r2, #127	; 0x7f
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be0:	e016      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bea:	d10d      	bne.n	8003c08 <HAL_UART_Receive_IT+0xcc>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d104      	bne.n	8003bfe <HAL_UART_Receive_IT+0xc2>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	227f      	movs	r2, #127	; 0x7f
 8003bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfc:	e008      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	223f      	movs	r2, #63	; 0x3f
 8003c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c06:	e003      	b.n	8003c10 <HAL_UART_Receive_IT+0xd4>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2222      	movs	r2, #34	; 0x22
 8003c1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c34:	d107      	bne.n	8003c46 <HAL_UART_Receive_IT+0x10a>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a0d      	ldr	r2, [pc, #52]	; (8003c78 <HAL_UART_Receive_IT+0x13c>)
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
 8003c44:	e002      	b.n	8003c4c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <HAL_UART_Receive_IT+0x140>)
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003c62:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	0800479f 	.word	0x0800479f
 8003c7c:	080046f9 	.word	0x080046f9

08003c80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d113      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	f000 80eb 	beq.w	8003ea2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	4798      	blx	r3
      }
      return;
 8003cd4:	e0e5      	b.n	8003ea2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80c0 	beq.w	8003e5e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80b5 	beq.w	8003e5e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00e      	beq.n	8003d1c <HAL_UART_IRQHandler+0x9c>
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d009      	beq.n	8003d1c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d14:	f043 0201 	orr.w	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <HAL_UART_IRQHandler+0xc4>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2202      	movs	r2, #2
 8003d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00e      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d009      	beq.n	8003d6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d64:	f043 0202 	orr.w	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d013      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d009      	beq.n	8003d9e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2208      	movs	r2, #8
 8003d90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d96:	f043 0208 	orr.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d07f      	beq.n	8003ea6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d007      	beq.n	8003dca <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dce:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d004      	beq.n	8003de8 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d031      	beq.n	8003e4c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 fc36 	bl	800465a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	d123      	bne.n	8003e44 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e0a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_UART_IRQHandler+0x234>)
 8003e1a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc fd8c 	bl	800093e <HAL_DMA_Abort_IT>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d016      	beq.n	8003e5a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003e36:	4610      	mov	r0, r2
 8003e38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3a:	e00e      	b.n	8003e5a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f845 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e42:	e00a      	b.n	8003e5a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 f841 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4a:	e006      	b.n	8003e5a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f83d 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003e58:	e025      	b.n	8003ea6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e5a:	bf00      	nop
    return;
 8003e5c:	e023      	b.n	8003ea6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
    }
    return;
 8003e82:	e012      	b.n	8003eaa <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00e      	beq.n	8003eac <HAL_UART_IRQHandler+0x22c>
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d009      	beq.n	8003eac <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fc14 	bl	80046c6 <UART_EndTransmit_IT>
    return;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_UART_IRQHandler+0x22c>
      return;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_UART_IRQHandler+0x22c>
    return;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_UART_IRQHandler+0x22c>
    return;
 8003eaa:	bf00      	nop
  }

}
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	0800469b 	.word	0x0800469b

08003eb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	4bb1      	ldr	r3, [pc, #708]	; (80041d4 <UART_SetConfig+0x2f4>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6812      	ldr	r2, [r2, #0]
 8003f16:	6939      	ldr	r1, [r7, #16]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a9f      	ldr	r2, [pc, #636]	; (80041d8 <UART_SetConfig+0x2f8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d121      	bne.n	8003fa4 <UART_SetConfig+0xc4>
 8003f60:	4b9e      	ldr	r3, [pc, #632]	; (80041dc <UART_SetConfig+0x2fc>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d816      	bhi.n	8003f9c <UART_SetConfig+0xbc>
 8003f6e:	a201      	add	r2, pc, #4	; (adr r2, 8003f74 <UART_SetConfig+0x94>)
 8003f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f74:	08003f85 	.word	0x08003f85
 8003f78:	08003f91 	.word	0x08003f91
 8003f7c:	08003f8b 	.word	0x08003f8b
 8003f80:	08003f97 	.word	0x08003f97
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e151      	b.n	800422e <UART_SetConfig+0x34e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	77fb      	strb	r3, [r7, #31]
 8003f8e:	e14e      	b.n	800422e <UART_SetConfig+0x34e>
 8003f90:	2304      	movs	r3, #4
 8003f92:	77fb      	strb	r3, [r7, #31]
 8003f94:	e14b      	b.n	800422e <UART_SetConfig+0x34e>
 8003f96:	2308      	movs	r3, #8
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e148      	b.n	800422e <UART_SetConfig+0x34e>
 8003f9c:	2310      	movs	r3, #16
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	bf00      	nop
 8003fa2:	e144      	b.n	800422e <UART_SetConfig+0x34e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a8d      	ldr	r2, [pc, #564]	; (80041e0 <UART_SetConfig+0x300>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d134      	bne.n	8004018 <UART_SetConfig+0x138>
 8003fae:	4b8b      	ldr	r3, [pc, #556]	; (80041dc <UART_SetConfig+0x2fc>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d829      	bhi.n	8004010 <UART_SetConfig+0x130>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <UART_SetConfig+0xe4>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08003ff9 	.word	0x08003ff9
 8003fc8:	08004011 	.word	0x08004011
 8003fcc:	08004011 	.word	0x08004011
 8003fd0:	08004011 	.word	0x08004011
 8003fd4:	08004005 	.word	0x08004005
 8003fd8:	08004011 	.word	0x08004011
 8003fdc:	08004011 	.word	0x08004011
 8003fe0:	08004011 	.word	0x08004011
 8003fe4:	08003fff 	.word	0x08003fff
 8003fe8:	08004011 	.word	0x08004011
 8003fec:	08004011 	.word	0x08004011
 8003ff0:	08004011 	.word	0x08004011
 8003ff4:	0800400b 	.word	0x0800400b
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]
 8003ffc:	e117      	b.n	800422e <UART_SetConfig+0x34e>
 8003ffe:	2302      	movs	r3, #2
 8004000:	77fb      	strb	r3, [r7, #31]
 8004002:	e114      	b.n	800422e <UART_SetConfig+0x34e>
 8004004:	2304      	movs	r3, #4
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e111      	b.n	800422e <UART_SetConfig+0x34e>
 800400a:	2308      	movs	r3, #8
 800400c:	77fb      	strb	r3, [r7, #31]
 800400e:	e10e      	b.n	800422e <UART_SetConfig+0x34e>
 8004010:	2310      	movs	r3, #16
 8004012:	77fb      	strb	r3, [r7, #31]
 8004014:	bf00      	nop
 8004016:	e10a      	b.n	800422e <UART_SetConfig+0x34e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a71      	ldr	r2, [pc, #452]	; (80041e4 <UART_SetConfig+0x304>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d120      	bne.n	8004064 <UART_SetConfig+0x184>
 8004022:	4b6e      	ldr	r3, [pc, #440]	; (80041dc <UART_SetConfig+0x2fc>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800402c:	2b10      	cmp	r3, #16
 800402e:	d00f      	beq.n	8004050 <UART_SetConfig+0x170>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d802      	bhi.n	800403a <UART_SetConfig+0x15a>
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <UART_SetConfig+0x164>
 8004038:	e010      	b.n	800405c <UART_SetConfig+0x17c>
 800403a:	2b20      	cmp	r3, #32
 800403c:	d005      	beq.n	800404a <UART_SetConfig+0x16a>
 800403e:	2b30      	cmp	r3, #48	; 0x30
 8004040:	d009      	beq.n	8004056 <UART_SetConfig+0x176>
 8004042:	e00b      	b.n	800405c <UART_SetConfig+0x17c>
 8004044:	2300      	movs	r3, #0
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e0f1      	b.n	800422e <UART_SetConfig+0x34e>
 800404a:	2302      	movs	r3, #2
 800404c:	77fb      	strb	r3, [r7, #31]
 800404e:	e0ee      	b.n	800422e <UART_SetConfig+0x34e>
 8004050:	2304      	movs	r3, #4
 8004052:	77fb      	strb	r3, [r7, #31]
 8004054:	e0eb      	b.n	800422e <UART_SetConfig+0x34e>
 8004056:	2308      	movs	r3, #8
 8004058:	77fb      	strb	r3, [r7, #31]
 800405a:	e0e8      	b.n	800422e <UART_SetConfig+0x34e>
 800405c:	2310      	movs	r3, #16
 800405e:	77fb      	strb	r3, [r7, #31]
 8004060:	bf00      	nop
 8004062:	e0e4      	b.n	800422e <UART_SetConfig+0x34e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5f      	ldr	r2, [pc, #380]	; (80041e8 <UART_SetConfig+0x308>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d120      	bne.n	80040b0 <UART_SetConfig+0x1d0>
 800406e:	4b5b      	ldr	r3, [pc, #364]	; (80041dc <UART_SetConfig+0x2fc>)
 8004070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004074:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d00f      	beq.n	800409c <UART_SetConfig+0x1bc>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d802      	bhi.n	8004086 <UART_SetConfig+0x1a6>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <UART_SetConfig+0x1b0>
 8004084:	e010      	b.n	80040a8 <UART_SetConfig+0x1c8>
 8004086:	2b80      	cmp	r3, #128	; 0x80
 8004088:	d005      	beq.n	8004096 <UART_SetConfig+0x1b6>
 800408a:	2bc0      	cmp	r3, #192	; 0xc0
 800408c:	d009      	beq.n	80040a2 <UART_SetConfig+0x1c2>
 800408e:	e00b      	b.n	80040a8 <UART_SetConfig+0x1c8>
 8004090:	2300      	movs	r3, #0
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e0cb      	b.n	800422e <UART_SetConfig+0x34e>
 8004096:	2302      	movs	r3, #2
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e0c8      	b.n	800422e <UART_SetConfig+0x34e>
 800409c:	2304      	movs	r3, #4
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e0c5      	b.n	800422e <UART_SetConfig+0x34e>
 80040a2:	2308      	movs	r3, #8
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e0c2      	b.n	800422e <UART_SetConfig+0x34e>
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	bf00      	nop
 80040ae:	e0be      	b.n	800422e <UART_SetConfig+0x34e>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4d      	ldr	r2, [pc, #308]	; (80041ec <UART_SetConfig+0x30c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d124      	bne.n	8004104 <UART_SetConfig+0x224>
 80040ba:	4b48      	ldr	r3, [pc, #288]	; (80041dc <UART_SetConfig+0x2fc>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c8:	d012      	beq.n	80040f0 <UART_SetConfig+0x210>
 80040ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040ce:	d802      	bhi.n	80040d6 <UART_SetConfig+0x1f6>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d007      	beq.n	80040e4 <UART_SetConfig+0x204>
 80040d4:	e012      	b.n	80040fc <UART_SetConfig+0x21c>
 80040d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040da:	d006      	beq.n	80040ea <UART_SetConfig+0x20a>
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e0:	d009      	beq.n	80040f6 <UART_SetConfig+0x216>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x21c>
 80040e4:	2300      	movs	r3, #0
 80040e6:	77fb      	strb	r3, [r7, #31]
 80040e8:	e0a1      	b.n	800422e <UART_SetConfig+0x34e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e09e      	b.n	800422e <UART_SetConfig+0x34e>
 80040f0:	2304      	movs	r3, #4
 80040f2:	77fb      	strb	r3, [r7, #31]
 80040f4:	e09b      	b.n	800422e <UART_SetConfig+0x34e>
 80040f6:	2308      	movs	r3, #8
 80040f8:	77fb      	strb	r3, [r7, #31]
 80040fa:	e098      	b.n	800422e <UART_SetConfig+0x34e>
 80040fc:	2310      	movs	r3, #16
 80040fe:	77fb      	strb	r3, [r7, #31]
 8004100:	bf00      	nop
 8004102:	e094      	b.n	800422e <UART_SetConfig+0x34e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <UART_SetConfig+0x310>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d124      	bne.n	8004158 <UART_SetConfig+0x278>
 800410e:	4b33      	ldr	r3, [pc, #204]	; (80041dc <UART_SetConfig+0x2fc>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d012      	beq.n	8004144 <UART_SetConfig+0x264>
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d802      	bhi.n	800412a <UART_SetConfig+0x24a>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <UART_SetConfig+0x258>
 8004128:	e012      	b.n	8004150 <UART_SetConfig+0x270>
 800412a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800412e:	d006      	beq.n	800413e <UART_SetConfig+0x25e>
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004134:	d009      	beq.n	800414a <UART_SetConfig+0x26a>
 8004136:	e00b      	b.n	8004150 <UART_SetConfig+0x270>
 8004138:	2301      	movs	r3, #1
 800413a:	77fb      	strb	r3, [r7, #31]
 800413c:	e077      	b.n	800422e <UART_SetConfig+0x34e>
 800413e:	2302      	movs	r3, #2
 8004140:	77fb      	strb	r3, [r7, #31]
 8004142:	e074      	b.n	800422e <UART_SetConfig+0x34e>
 8004144:	2304      	movs	r3, #4
 8004146:	77fb      	strb	r3, [r7, #31]
 8004148:	e071      	b.n	800422e <UART_SetConfig+0x34e>
 800414a:	2308      	movs	r3, #8
 800414c:	77fb      	strb	r3, [r7, #31]
 800414e:	e06e      	b.n	800422e <UART_SetConfig+0x34e>
 8004150:	2310      	movs	r3, #16
 8004152:	77fb      	strb	r3, [r7, #31]
 8004154:	bf00      	nop
 8004156:	e06a      	b.n	800422e <UART_SetConfig+0x34e>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a25      	ldr	r2, [pc, #148]	; (80041f4 <UART_SetConfig+0x314>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d124      	bne.n	80041ac <UART_SetConfig+0x2cc>
 8004162:	4b1e      	ldr	r3, [pc, #120]	; (80041dc <UART_SetConfig+0x2fc>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004170:	d012      	beq.n	8004198 <UART_SetConfig+0x2b8>
 8004172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004176:	d802      	bhi.n	800417e <UART_SetConfig+0x29e>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <UART_SetConfig+0x2ac>
 800417c:	e012      	b.n	80041a4 <UART_SetConfig+0x2c4>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	d006      	beq.n	8004192 <UART_SetConfig+0x2b2>
 8004184:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004188:	d009      	beq.n	800419e <UART_SetConfig+0x2be>
 800418a:	e00b      	b.n	80041a4 <UART_SetConfig+0x2c4>
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e04d      	b.n	800422e <UART_SetConfig+0x34e>
 8004192:	2302      	movs	r3, #2
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e04a      	b.n	800422e <UART_SetConfig+0x34e>
 8004198:	2304      	movs	r3, #4
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e047      	b.n	800422e <UART_SetConfig+0x34e>
 800419e:	2308      	movs	r3, #8
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e044      	b.n	800422e <UART_SetConfig+0x34e>
 80041a4:	2310      	movs	r3, #16
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	bf00      	nop
 80041aa:	e040      	b.n	800422e <UART_SetConfig+0x34e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <UART_SetConfig+0x318>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d139      	bne.n	800422a <UART_SetConfig+0x34a>
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <UART_SetConfig+0x2fc>)
 80041b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c4:	d027      	beq.n	8004216 <UART_SetConfig+0x336>
 80041c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041ca:	d817      	bhi.n	80041fc <UART_SetConfig+0x31c>
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01c      	beq.n	800420a <UART_SetConfig+0x32a>
 80041d0:	e027      	b.n	8004222 <UART_SetConfig+0x342>
 80041d2:	bf00      	nop
 80041d4:	efff69f3 	.word	0xefff69f3
 80041d8:	40011000 	.word	0x40011000
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40004400 	.word	0x40004400
 80041e4:	40004800 	.word	0x40004800
 80041e8:	40004c00 	.word	0x40004c00
 80041ec:	40005000 	.word	0x40005000
 80041f0:	40011400 	.word	0x40011400
 80041f4:	40007800 	.word	0x40007800
 80041f8:	40007c00 	.word	0x40007c00
 80041fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004200:	d006      	beq.n	8004210 <UART_SetConfig+0x330>
 8004202:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004206:	d009      	beq.n	800421c <UART_SetConfig+0x33c>
 8004208:	e00b      	b.n	8004222 <UART_SetConfig+0x342>
 800420a:	2300      	movs	r3, #0
 800420c:	77fb      	strb	r3, [r7, #31]
 800420e:	e00e      	b.n	800422e <UART_SetConfig+0x34e>
 8004210:	2302      	movs	r3, #2
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e00b      	b.n	800422e <UART_SetConfig+0x34e>
 8004216:	2304      	movs	r3, #4
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e008      	b.n	800422e <UART_SetConfig+0x34e>
 800421c:	2308      	movs	r3, #8
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e005      	b.n	800422e <UART_SetConfig+0x34e>
 8004222:	2310      	movs	r3, #16
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	bf00      	nop
 8004228:	e001      	b.n	800422e <UART_SetConfig+0x34e>
 800422a:	2310      	movs	r3, #16
 800422c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004236:	d17c      	bne.n	8004332 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b08      	cmp	r3, #8
 800423c:	d859      	bhi.n	80042f2 <UART_SetConfig+0x412>
 800423e:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <UART_SetConfig+0x364>)
 8004240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004244:	08004269 	.word	0x08004269
 8004248:	08004287 	.word	0x08004287
 800424c:	080042a5 	.word	0x080042a5
 8004250:	080042f3 	.word	0x080042f3
 8004254:	080042bd 	.word	0x080042bd
 8004258:	080042f3 	.word	0x080042f3
 800425c:	080042f3 	.word	0x080042f3
 8004260:	080042f3 	.word	0x080042f3
 8004264:	080042db 	.word	0x080042db
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004268:	f7fd ffe2 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 800426c:	4603      	mov	r3, r0
 800426e:	005a      	lsls	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	085b      	lsrs	r3, r3, #1
 8004276:	441a      	add	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	b29b      	uxth	r3, r3
 8004282:	61bb      	str	r3, [r7, #24]
        break;
 8004284:	e038      	b.n	80042f8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004286:	f7fd ffe7 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 800428a:	4603      	mov	r3, r0
 800428c:	005a      	lsls	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	085b      	lsrs	r3, r3, #1
 8004294:	441a      	add	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	b29b      	uxth	r3, r3
 80042a0:	61bb      	str	r3, [r7, #24]
        break;
 80042a2:	e029      	b.n	80042f8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	085a      	lsrs	r2, r3, #1
 80042aa:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <UART_SetConfig+0x540>)
 80042ac:	4413      	add	r3, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6852      	ldr	r2, [r2, #4]
 80042b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	61bb      	str	r3, [r7, #24]
        break;
 80042ba:	e01d      	b.n	80042f8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80042bc:	f7fd fed4 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80042c0:	4603      	mov	r3, r0
 80042c2:	005a      	lsls	r2, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	441a      	add	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	61bb      	str	r3, [r7, #24]
        break;
 80042d8:	e00e      	b.n	80042f8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	085b      	lsrs	r3, r3, #1
 80042e0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	61bb      	str	r3, [r7, #24]
        break;
 80042f0:	e002      	b.n	80042f8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	75fb      	strb	r3, [r7, #23]
        break;
 80042f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b0f      	cmp	r3, #15
 80042fc:	d916      	bls.n	800432c <UART_SetConfig+0x44c>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004304:	d212      	bcs.n	800432c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	b29b      	uxth	r3, r3
 800430a:	f023 030f 	bic.w	r3, r3, #15
 800430e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	b29b      	uxth	r3, r3
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	b29a      	uxth	r2, r3
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	4313      	orrs	r3, r2
 8004320:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	89fa      	ldrh	r2, [r7, #14]
 8004328:	60da      	str	r2, [r3, #12]
 800432a:	e06e      	b.n	800440a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
 8004330:	e06b      	b.n	800440a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004332:	7ffb      	ldrb	r3, [r7, #31]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d857      	bhi.n	80043e8 <UART_SetConfig+0x508>
 8004338:	a201      	add	r2, pc, #4	; (adr r2, 8004340 <UART_SetConfig+0x460>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004365 	.word	0x08004365
 8004344:	08004381 	.word	0x08004381
 8004348:	0800439d 	.word	0x0800439d
 800434c:	080043e9 	.word	0x080043e9
 8004350:	080043b5 	.word	0x080043b5
 8004354:	080043e9 	.word	0x080043e9
 8004358:	080043e9 	.word	0x080043e9
 800435c:	080043e9 	.word	0x080043e9
 8004360:	080043d1 	.word	0x080043d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004364:	f7fd ff64 	bl	8002230 <HAL_RCC_GetPCLK1Freq>
 8004368:	4602      	mov	r2, r0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	fbb2 f3f3 	udiv	r3, r2, r3
 800437a:	b29b      	uxth	r3, r3
 800437c:	61bb      	str	r3, [r7, #24]
        break;
 800437e:	e036      	b.n	80043ee <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004380:	f7fd ff6a 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8004384:	4602      	mov	r2, r0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	b29b      	uxth	r3, r3
 8004398:	61bb      	str	r3, [r7, #24]
        break;
 800439a:	e028      	b.n	80043ee <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	085a      	lsrs	r2, r3, #1
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <UART_SetConfig+0x544>)
 80043a4:	4413      	add	r3, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6852      	ldr	r2, [r2, #4]
 80043aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	61bb      	str	r3, [r7, #24]
        break;
 80043b2:	e01c      	b.n	80043ee <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80043b4:	f7fd fe58 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	085b      	lsrs	r3, r3, #1
 80043c0:	441a      	add	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	61bb      	str	r3, [r7, #24]
        break;
 80043ce:	e00e      	b.n	80043ee <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	61bb      	str	r3, [r7, #24]
        break;
 80043e6:	e002      	b.n	80043ee <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
        break;
 80043ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	2b0f      	cmp	r3, #15
 80043f2:	d908      	bls.n	8004406 <UART_SetConfig+0x526>
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fa:	d204      	bcs.n	8004406 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	60da      	str	r2, [r3, #12]
 8004404:	e001      	b.n	800440a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004416:	7dfb      	ldrb	r3, [r7, #23]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	01e84800 	.word	0x01e84800
 8004424:	00f42400 	.word	0x00f42400

08004428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00a      	beq.n	8004452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00a      	beq.n	8004474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00a      	beq.n	8004496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044de:	f003 0320 	and.w	r3, r3, #32
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d01a      	beq.n	800453e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004526:	d10a      	bne.n	800453e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800457a:	f7fc f8a1 	bl	80006c0 <HAL_GetTick>
 800457e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d10e      	bne.n	80045ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800458e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f000 f814 	bl	80045ca <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e00a      	b.n	80045c2 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	603b      	str	r3, [r7, #0]
 80045d6:	4613      	mov	r3, r2
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	e02a      	b.n	8004632 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d026      	beq.n	8004632 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e4:	f7fc f86c 	bl	80006c0 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d302      	bcc.n	80045fa <UART_WaitOnFlagUntilTimeout+0x30>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d11b      	bne.n	8004632 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004608:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e00f      	b.n	8004652 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0c5      	beq.n	80045dc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004670:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0201 	bic.w	r2, r2, #1
 8004680:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	661a      	str	r2, [r3, #96]	; 0x60
}
 800468e:	bf00      	nop
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fc07 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046be:	bf00      	nop
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046dc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff fbe4 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f0:	bf00      	nop
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004706:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470c:	2b22      	cmp	r3, #34	; 0x22
 800470e:	d13a      	bne.n	8004786 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004718:	89bb      	ldrh	r3, [r7, #12]
 800471a:	b2d9      	uxtb	r1, r3
 800471c:	89fb      	ldrh	r3, [r7, #14]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	400a      	ands	r2, r1
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d121      	bne.n	8004796 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004760:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f001 f864 	bl	800584c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004784:	e007      	b.n	8004796 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0208 	orr.w	r2, r2, #8
 8004794:	619a      	str	r2, [r3, #24]
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047ac:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	d13a      	bne.n	800482c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80047c4:	89ba      	ldrh	r2, [r7, #12]
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	4013      	ands	r3, r2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	1c9a      	adds	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d121      	bne.n	800483c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004806:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 f811 	bl	800584c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800482a:	e007      	b.n	800483c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0208 	orr.w	r2, r2, #8
 800483a:	619a      	str	r2, [r3, #24]
}
 800483c:	bf00      	nop
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004844:	b084      	sub	sp, #16
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	f107 001c 	add.w	r0, r7, #28
 8004852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b01      	cmp	r3, #1
 800485a:	d120      	bne.n	800489e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <USB_CoreInit+0xac>)
 800486e:	4013      	ands	r3, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d105      	bne.n	8004892 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fa60 	bl	8004d58 <USB_CoreReset>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e010      	b.n	80048c0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa54 	bl	8004d58 <USB_CoreReset>
 80048b0:	4603      	mov	r3, r0
 80048b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80048c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d10b      	bne.n	80048de <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f043 0206 	orr.w	r2, r3, #6
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048de:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ea:	b004      	add	sp, #16
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	ffbdffbf 	.word	0xffbdffbf

080048f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 0201 	bic.w	r2, r3, #1
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b082      	sub	sp, #8
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	460b      	mov	r3, r1
 8004920:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d106      	bne.n	8004942 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e00b      	b.n	800495a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004942:	78fb      	ldrb	r3, [r7, #3]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d106      	bne.n	8004956 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
 8004954:	e001      	b.n	800495a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e003      	b.n	8004962 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800495a:	2032      	movs	r0, #50	; 0x32
 800495c:	f7fb febc 	bl	80006d8 <HAL_Delay>

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800496c:	b084      	sub	sp, #16
 800496e:	b580      	push	{r7, lr}
 8004970:	b086      	sub	sp, #24
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800497a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004986:	2300      	movs	r3, #0
 8004988:	613b      	str	r3, [r7, #16]
 800498a:	e009      	b.n	80049a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	3340      	adds	r3, #64	; 0x40
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3301      	adds	r3, #1
 800499e:	613b      	str	r3, [r7, #16]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	2b0e      	cmp	r3, #14
 80049a4:	d9f2      	bls.n	800498c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d112      	bne.n	80049d2 <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e005      	b.n	80049de <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2300      	movs	r3, #0
 80049e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f0:	4619      	mov	r1, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	461a      	mov	r2, r3
 80049fa:	680b      	ldr	r3, [r1, #0]
 80049fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d10c      	bne.n	8004a1e <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f971 	bl	8004cf4 <USB_SetDevSpeed>
 8004a12:	e018      	b.n	8004a46 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a14:	2101      	movs	r1, #1
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f96c 	bl	8004cf4 <USB_SetDevSpeed>
 8004a1c:	e013      	b.n	8004a46 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b03      	cmp	r3, #3
 8004a22:	d10c      	bne.n	8004a3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f961 	bl	8004cf4 <USB_SetDevSpeed>
 8004a32:	e008      	b.n	8004a46 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a34:	2101      	movs	r1, #1
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f95c 	bl	8004cf4 <USB_SetDevSpeed>
 8004a3c:	e003      	b.n	8004a46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a3e:	2103      	movs	r1, #3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f957 	bl	8004cf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a46:	2110      	movs	r1, #16
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f90b 	bl	8004c64 <USB_FlushTxFifo>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f929 	bl	8004cb0 <USB_FlushRxFifo>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e043      	b.n	8004b1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa8:	d118      	bne.n	8004adc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e013      	b.n	8004aee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e008      	b.n	8004aee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2300      	movs	r3, #0
 8004aec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3301      	adds	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d3b7      	bcc.n	8004a92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e043      	b.n	8004bb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3e:	d118      	bne.n	8004b72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e013      	b.n	8004b84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e008      	b.n	8004b84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3b7      	bcc.n	8004b28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bca:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d110      	bne.n	8004bf4 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <USB_DevInit+0x2e8>)
 8004bdc:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bec:	4619      	mov	r1, r3
 8004bee:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <USB_DevInit+0x2ec>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d105      	bne.n	8004c14 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f043 0210 	orr.w	r2, r3, #16
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <USB_DevInit+0x2f0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	f043 0208 	orr.w	r2, r3, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699a      	ldr	r2, [r3, #24]
 8004c3c:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <USB_DevInit+0x2f4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c50:	b004      	add	sp, #16
 8004c52:	4770      	bx	lr
 8004c54:	00800100 	.word	0x00800100
 8004c58:	00010003 	.word	0x00010003
 8004c5c:	803c3800 	.word	0x803c3800
 8004c60:	40000004 	.word	0x40000004

08004c64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	019b      	lsls	r3, r3, #6
 8004c76:	f043 0220 	orr.w	r2, r3, #32
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <USB_FlushTxFifo+0x48>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d901      	bls.n	8004c90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d0f0      	beq.n	8004c7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <USB_FlushRxFifo+0x40>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d901      	bls.n	8004cd4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e006      	b.n	8004ce2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d0f0      	beq.n	8004cc2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	00030d40 	.word	0x00030d40

08004cf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d14:	4313      	orrs	r3, r2
 8004d16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004d46:	2003      	movs	r0, #3
 8004d48:	f7fb fcc6 	bl	80006d8 <HAL_Delay>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
	...

08004d58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <USB_CoreReset+0x64>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d901      	bls.n	8004d76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e01b      	b.n	8004dae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	daf2      	bge.n	8004d64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f043 0201 	orr.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3301      	adds	r3, #1
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a09      	ldr	r2, [pc, #36]	; (8004dbc <USB_CoreReset+0x64>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e006      	b.n	8004dae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d0f0      	beq.n	8004d8e <USB_CoreReset+0x36>

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3714      	adds	r7, #20
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	00030d40 	.word	0x00030d40

08004dc0 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <BH1750_Init+0x34>)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8004dce:	f000 f813 	bl	8004df8 <BH1750_Reset>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d107      	bne.n	8004de8 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8004dd8:	2045      	movs	r0, #69	; 0x45
 8004dda:	f000 f859 	bl	8004e90 <BH1750_SetMtreg>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <BH1750_Init+0x28>
			return BH1750_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	e000      	b.n	8004dea <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8004de8:	2301      	movs	r3, #1
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	20000220 	.word	0x20000220

08004df8 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8004dfe:	2307      	movs	r3, #7
 8004e00:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8004e02:	4b09      	ldr	r3, [pc, #36]	; (8004e28 <BH1750_Reset+0x30>)
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	1dfa      	adds	r2, r7, #7
 8004e08:	230a      	movs	r3, #10
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	2146      	movs	r1, #70	; 0x46
 8004e10:	f7fc f824 	bl	8000e5c <HAL_I2C_Master_Transmit>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <BH1750_Reset+0x26>
		return BH1750_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8004e1e:	2301      	movs	r3, #1
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	20000220 	.word	0x20000220

08004e2c <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	4603      	mov	r3, r0
 8004e34:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	091b      	lsrs	r3, r3, #4
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <BH1750_SetMode+0x22>
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <BH1750_SetMode+0x22>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e018      	b.n	8004e80 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	dd01      	ble.n	8004e5c <BH1750_SetMode+0x30>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e011      	b.n	8004e80 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8004e5c:	79fa      	ldrb	r2, [r7, #7]
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <BH1750_SetMode+0x5c>)
 8004e60:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <BH1750_SetMode+0x60>)
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	1dfa      	adds	r2, r7, #7
 8004e68:	230a      	movs	r3, #10
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	2146      	movs	r1, #70	; 0x46
 8004e70:	f7fb fff4 	bl	8000e5c <HAL_I2C_Master_Transmit>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <BH1750_SetMode+0x52>
		return BH1750_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	e000      	b.n	8004e80 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8004e7e:	2301      	movs	r3, #1
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	2000021c 	.word	0x2000021c
 8004e8c:	20000220 	.word	0x20000220

08004e90 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	4603      	mov	r3, r0
 8004e98:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2b1e      	cmp	r3, #30
 8004e9e:	d902      	bls.n	8004ea6 <BH1750_SetMtreg+0x16>
 8004ea0:	79fb      	ldrb	r3, [r7, #7]
 8004ea2:	2bff      	cmp	r3, #255	; 0xff
 8004ea4:	d101      	bne.n	8004eaa <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e037      	b.n	8004f1a <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	; (8004f24 <BH1750_SetMtreg+0x94>)
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8004ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	b25b      	sxtb	r3, r3
 8004ec8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8004ed2:	4b15      	ldr	r3, [pc, #84]	; (8004f28 <BH1750_SetMtreg+0x98>)
 8004ed4:	6818      	ldr	r0, [r3, #0]
 8004ed6:	f107 020c 	add.w	r2, r7, #12
 8004eda:	230a      	movs	r3, #10
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2301      	movs	r3, #1
 8004ee0:	2146      	movs	r1, #70	; 0x46
 8004ee2:	f7fb ffbb 	bl	8000e5c <HAL_I2C_Master_Transmit>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e012      	b.n	8004f1a <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	; (8004f28 <BH1750_SetMtreg+0x98>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	230a      	movs	r3, #10
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2301      	movs	r3, #1
 8004f04:	2146      	movs	r1, #70	; 0x46
 8004f06:	f7fb ffa9 	bl	8000e5c <HAL_I2C_Master_Transmit>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e000      	b.n	8004f1a <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8004f18:	2301      	movs	r3, #1
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000224 	.word	0x20000224
 8004f28:	20000220 	.word	0x20000220

08004f2c <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8004f34:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <BH1750_ReadLight+0xa0>)
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	f107 0208 	add.w	r2, r7, #8
 8004f3c:	230a      	movs	r3, #10
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	2302      	movs	r3, #2
 8004f42:	2146      	movs	r1, #70	; 0x46
 8004f44:	f7fc f87e 	bl	8001044 <HAL_I2C_Master_Receive>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d138      	bne.n	8004fc0 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8004f4e:	7a3b      	ldrb	r3, [r7, #8]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	7a7a      	ldrb	r2, [r7, #9]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	ee07 3a90 	vmov	s15, r3
 8004f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5e:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <BH1750_ReadLight+0xa4>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b45      	cmp	r3, #69	; 0x45
 8004f68:	d00f      	beq.n	8004f8a <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8004f6a:	4b19      	ldr	r3, [pc, #100]	; (8004fd0 <BH1750_ReadLight+0xa4>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f76:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004fd4 <BH1750_ReadLight+0xa8>
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8004f8a:	4b13      	ldr	r3, [pc, #76]	; (8004fd8 <BH1750_ReadLight+0xac>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b21      	cmp	r3, #33	; 0x21
 8004f90:	d003      	beq.n	8004f9a <BH1750_ReadLight+0x6e>
 8004f92:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <BH1750_ReadLight+0xac>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b11      	cmp	r3, #17
 8004f98:	d107      	bne.n	8004faa <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8004f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004f9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004fa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fa6:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8004faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8004fae:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004fdc <BH1750_ReadLight+0xb0>
 8004fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e000      	b.n	8004fc2 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8004fc0:	2301      	movs	r3, #1
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20000220 	.word	0x20000220
 8004fd0:	20000224 	.word	0x20000224
 8004fd4:	428a0000 	.word	0x428a0000
 8004fd8:	2000021c 	.word	0x2000021c
 8004fdc:	3f99999a 	.word	0x3f99999a

08004fe0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe6:	f107 031c 	add.w	r3, r7, #28
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	605a      	str	r2, [r3, #4]
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	60da      	str	r2, [r3, #12]
 8004ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff6:	4b95      	ldr	r3, [pc, #596]	; (800524c <MX_GPIO_Init+0x26c>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	4a94      	ldr	r2, [pc, #592]	; (800524c <MX_GPIO_Init+0x26c>)
 8004ffc:	f043 0304 	orr.w	r3, r3, #4
 8005000:	6313      	str	r3, [r2, #48]	; 0x30
 8005002:	4b92      	ldr	r3, [pc, #584]	; (800524c <MX_GPIO_Init+0x26c>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800500e:	4b8f      	ldr	r3, [pc, #572]	; (800524c <MX_GPIO_Init+0x26c>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4a8e      	ldr	r2, [pc, #568]	; (800524c <MX_GPIO_Init+0x26c>)
 8005014:	f043 0320 	orr.w	r3, r3, #32
 8005018:	6313      	str	r3, [r2, #48]	; 0x30
 800501a:	4b8c      	ldr	r3, [pc, #560]	; (800524c <MX_GPIO_Init+0x26c>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f003 0320 	and.w	r3, r3, #32
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005026:	4b89      	ldr	r3, [pc, #548]	; (800524c <MX_GPIO_Init+0x26c>)
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	4a88      	ldr	r2, [pc, #544]	; (800524c <MX_GPIO_Init+0x26c>)
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	6313      	str	r3, [r2, #48]	; 0x30
 8005032:	4b86      	ldr	r3, [pc, #536]	; (800524c <MX_GPIO_Init+0x26c>)
 8005034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503a:	613b      	str	r3, [r7, #16]
 800503c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800503e:	4b83      	ldr	r3, [pc, #524]	; (800524c <MX_GPIO_Init+0x26c>)
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	4a82      	ldr	r2, [pc, #520]	; (800524c <MX_GPIO_Init+0x26c>)
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6313      	str	r3, [r2, #48]	; 0x30
 800504a:	4b80      	ldr	r3, [pc, #512]	; (800524c <MX_GPIO_Init+0x26c>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005056:	4b7d      	ldr	r3, [pc, #500]	; (800524c <MX_GPIO_Init+0x26c>)
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	4a7c      	ldr	r2, [pc, #496]	; (800524c <MX_GPIO_Init+0x26c>)
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	6313      	str	r3, [r2, #48]	; 0x30
 8005062:	4b7a      	ldr	r3, [pc, #488]	; (800524c <MX_GPIO_Init+0x26c>)
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	60bb      	str	r3, [r7, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800506e:	4b77      	ldr	r3, [pc, #476]	; (800524c <MX_GPIO_Init+0x26c>)
 8005070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005072:	4a76      	ldr	r2, [pc, #472]	; (800524c <MX_GPIO_Init+0x26c>)
 8005074:	f043 0308 	orr.w	r3, r3, #8
 8005078:	6313      	str	r3, [r2, #48]	; 0x30
 800507a:	4b74      	ldr	r3, [pc, #464]	; (800524c <MX_GPIO_Init+0x26c>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	607b      	str	r3, [r7, #4]
 8005084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005086:	4b71      	ldr	r3, [pc, #452]	; (800524c <MX_GPIO_Init+0x26c>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	4a70      	ldr	r2, [pc, #448]	; (800524c <MX_GPIO_Init+0x26c>)
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	6313      	str	r3, [r2, #48]	; 0x30
 8005092:	4b6e      	ldr	r3, [pc, #440]	; (800524c <MX_GPIO_Init+0x26c>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED1_GPIO_Port, EXT_LED1_Pin, GPIO_PIN_RESET);
 800509e:	2200      	movs	r2, #0
 80050a0:	2108      	movs	r1, #8
 80050a2:	486b      	ldr	r0, [pc, #428]	; (8005250 <MX_GPIO_Init+0x270>)
 80050a4:	f7fb fe18 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80050a8:	2200      	movs	r2, #0
 80050aa:	f244 0181 	movw	r1, #16513	; 0x4081
 80050ae:	4869      	ldr	r0, [pc, #420]	; (8005254 <MX_GPIO_Init+0x274>)
 80050b0:	f7fb fe12 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80050b4:	2200      	movs	r2, #0
 80050b6:	2140      	movs	r1, #64	; 0x40
 80050b8:	4867      	ldr	r0, [pc, #412]	; (8005258 <MX_GPIO_Init+0x278>)
 80050ba:	f7fb fe0d 	bl	8000cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin|EXT_BTN2_Pin;
 80050be:	f242 0308 	movw	r3, #8200	; 0x2008
 80050c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050c4:	4b65      	ldr	r3, [pc, #404]	; (800525c <MX_GPIO_Init+0x27c>)
 80050c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050cc:	f107 031c 	add.w	r3, r7, #28
 80050d0:	4619      	mov	r1, r3
 80050d2:	4863      	ldr	r0, [pc, #396]	; (8005260 <MX_GPIO_Init+0x280>)
 80050d4:	f7fb fc56 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_DT_Pin;
 80050d8:	2320      	movs	r3, #32
 80050da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_DT_GPIO_Port, &GPIO_InitStruct);
 80050e4:	f107 031c 	add.w	r3, r7, #28
 80050e8:	4619      	mov	r1, r3
 80050ea:	485e      	ldr	r0, [pc, #376]	; (8005264 <MX_GPIO_Init+0x284>)
 80050ec:	f7fb fc4a 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENCODER_CLK_Pin;
 80050f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80050f6:	4b59      	ldr	r3, [pc, #356]	; (800525c <MX_GPIO_Init+0x27c>)
 80050f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENCODER_CLK_GPIO_Port, &GPIO_InitStruct);
 80050fe:	f107 031c 	add.w	r3, r7, #28
 8005102:	4619      	mov	r1, r3
 8005104:	4857      	ldr	r0, [pc, #348]	; (8005264 <MX_GPIO_Init+0x284>)
 8005106:	f7fb fc3d 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_BTN1_Pin;
 800510a:	2301      	movs	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800510e:	4b56      	ldr	r3, [pc, #344]	; (8005268 <MX_GPIO_Init+0x288>)
 8005110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT_BTN1_GPIO_Port, &GPIO_InitStruct);
 8005116:	f107 031c 	add.w	r3, r7, #28
 800511a:	4619      	mov	r1, r3
 800511c:	4850      	ldr	r0, [pc, #320]	; (8005260 <MX_GPIO_Init+0x280>)
 800511e:	f7fb fc31 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005122:	2332      	movs	r3, #50	; 0x32
 8005124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005126:	2302      	movs	r3, #2
 8005128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800512e:	2303      	movs	r3, #3
 8005130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005132:	230b      	movs	r3, #11
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005136:	f107 031c 	add.w	r3, r7, #28
 800513a:	4619      	mov	r1, r3
 800513c:	4848      	ldr	r0, [pc, #288]	; (8005260 <MX_GPIO_Init+0x280>)
 800513e:	f7fb fc21 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005142:	2386      	movs	r3, #134	; 0x86
 8005144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005146:	2302      	movs	r3, #2
 8005148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514e:	2303      	movs	r3, #3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005152:	230b      	movs	r3, #11
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	4619      	mov	r1, r3
 800515c:	483c      	ldr	r0, [pc, #240]	; (8005250 <MX_GPIO_Init+0x270>)
 800515e:	f7fb fc11 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_LED1_Pin;
 8005162:	2308      	movs	r3, #8
 8005164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005166:	2301      	movs	r3, #1
 8005168:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800516e:	2300      	movs	r3, #0
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(EXT_LED1_GPIO_Port, &GPIO_InitStruct);
 8005172:	f107 031c 	add.w	r3, r7, #28
 8005176:	4619      	mov	r1, r3
 8005178:	4835      	ldr	r0, [pc, #212]	; (8005250 <MX_GPIO_Init+0x270>)
 800517a:	f7fb fc03 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800517e:	f244 0381 	movw	r3, #16513	; 0x4081
 8005182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005184:	2301      	movs	r3, #1
 8005186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005188:	2300      	movs	r3, #0
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800518c:	2300      	movs	r3, #0
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005190:	f107 031c 	add.w	r3, r7, #28
 8005194:	4619      	mov	r1, r3
 8005196:	482f      	ldr	r0, [pc, #188]	; (8005254 <MX_GPIO_Init+0x274>)
 8005198:	f7fb fbf4 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800519c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051aa:	2303      	movs	r3, #3
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80051ae:	230b      	movs	r3, #11
 80051b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80051b2:	f107 031c 	add.w	r3, r7, #28
 80051b6:	4619      	mov	r1, r3
 80051b8:	4826      	ldr	r0, [pc, #152]	; (8005254 <MX_GPIO_Init+0x274>)
 80051ba:	f7fb fbe3 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c2:	2301      	movs	r3, #1
 80051c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c6:	2300      	movs	r3, #0
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ca:	2300      	movs	r3, #0
 80051cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80051ce:	f107 031c 	add.w	r3, r7, #28
 80051d2:	4619      	mov	r1, r3
 80051d4:	4820      	ldr	r0, [pc, #128]	; (8005258 <MX_GPIO_Init+0x278>)
 80051d6:	f7fb fbd5 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80051e6:	f107 031c 	add.w	r3, r7, #28
 80051ea:	4619      	mov	r1, r3
 80051ec:	481a      	ldr	r0, [pc, #104]	; (8005258 <MX_GPIO_Init+0x278>)
 80051ee:	f7fb fbc9 	bl	8000984 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80051f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80051f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f8:	2302      	movs	r3, #2
 80051fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005200:	2303      	movs	r3, #3
 8005202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005204:	230b      	movs	r3, #11
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005208:	f107 031c 	add.w	r3, r7, #28
 800520c:	4619      	mov	r1, r3
 800520e:	4812      	ldr	r0, [pc, #72]	; (8005258 <MX_GPIO_Init+0x278>)
 8005210:	f7fb fbb8 	bl	8000984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005214:	2200      	movs	r2, #0
 8005216:	2100      	movs	r1, #0
 8005218:	2006      	movs	r0, #6
 800521a:	f7fb fb5a 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800521e:	2006      	movs	r0, #6
 8005220:	f7fb fb73 	bl	800090a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005224:	2200      	movs	r2, #0
 8005226:	2100      	movs	r1, #0
 8005228:	2009      	movs	r0, #9
 800522a:	f7fb fb52 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800522e:	2009      	movs	r0, #9
 8005230:	f7fb fb6b 	bl	800090a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005234:	2200      	movs	r2, #0
 8005236:	2100      	movs	r1, #0
 8005238:	2028      	movs	r0, #40	; 0x28
 800523a:	f7fb fb4a 	bl	80008d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800523e:	2028      	movs	r0, #40	; 0x28
 8005240:	f7fb fb63 	bl	800090a <HAL_NVIC_EnableIRQ>

}
 8005244:	bf00      	nop
 8005246:	3730      	adds	r7, #48	; 0x30
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40023800 	.word	0x40023800
 8005250:	40020000 	.word	0x40020000
 8005254:	40020400 	.word	0x40020400
 8005258:	40021800 	.word	0x40021800
 800525c:	10110000 	.word	0x10110000
 8005260:	40020800 	.word	0x40020800
 8005264:	40021400 	.word	0x40021400
 8005268:	10210000 	.word	0x10210000

0800526c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af02      	add	r7, sp, #8
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8005284:	7bfb      	ldrb	r3, [r7, #15]
 8005286:	f043 030c 	orr.w	r3, r3, #12
 800528a:	b2db      	uxtb	r3, r3
 800528c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	f043 0308 	orr.w	r3, r3, #8
 8005294:	b2db      	uxtb	r3, r3
 8005296:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8005298:	7bbb      	ldrb	r3, [r7, #14]
 800529a:	f043 030c 	orr.w	r3, r3, #12
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80052a2:	7bbb      	ldrb	r3, [r7, #14]
 80052a4:	f043 0308 	orr.w	r3, r3, #8
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80052ac:	f107 0208 	add.w	r2, r7, #8
 80052b0:	2364      	movs	r3, #100	; 0x64
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	2304      	movs	r3, #4
 80052b6:	214e      	movs	r1, #78	; 0x4e
 80052b8:	4803      	ldr	r0, [pc, #12]	; (80052c8 <lcd_send_cmd+0x5c>)
 80052ba:	f7fb fdcf 	bl	8000e5c <HAL_I2C_Master_Transmit>
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000274 	.word	0x20000274

080052cc <lcd_send_data>:

void lcd_send_data (char data)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af02      	add	r7, sp, #8
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80052d6:	79fb      	ldrb	r3, [r7, #7]
 80052d8:	f023 030f 	bic.w	r3, r3, #15
 80052dc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
 80052e6:	f043 030d 	orr.w	r3, r3, #13
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
 80052f0:	f043 0309 	orr.w	r3, r3, #9
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	f043 030d 	orr.w	r3, r3, #13
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	f043 0309 	orr.w	r3, r3, #9
 8005308:	b2db      	uxtb	r3, r3
 800530a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800530c:	f107 0208 	add.w	r2, r7, #8
 8005310:	2364      	movs	r3, #100	; 0x64
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	2304      	movs	r3, #4
 8005316:	214e      	movs	r1, #78	; 0x4e
 8005318:	4803      	ldr	r0, [pc, #12]	; (8005328 <lcd_send_data+0x5c>)
 800531a:	f7fb fd9f 	bl	8000e5c <HAL_I2C_Master_Transmit>
}
 800531e:	bf00      	nop
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000274 	.word	0x20000274

0800532c <lcd_clear>:

void lcd_clear (void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8005332:	2080      	movs	r0, #128	; 0x80
 8005334:	f7ff ff9a 	bl	800526c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e005      	b.n	800534a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800533e:	2020      	movs	r0, #32
 8005340:	f7ff ffc4 	bl	80052cc <lcd_send_data>
	for (int i=0; i<70; i++)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3301      	adds	r3, #1
 8005348:	607b      	str	r3, [r7, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b45      	cmp	r3, #69	; 0x45
 800534e:	ddf6      	ble.n	800533e <lcd_clear+0x12>
	}
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
    switch (row)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <lcd_put_cur+0x16>
 8005368:	2b01      	cmp	r3, #1
 800536a:	d005      	beq.n	8005378 <lcd_put_cur+0x20>
 800536c:	e009      	b.n	8005382 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	603b      	str	r3, [r7, #0]
            break;
 8005376:	e004      	b.n	8005382 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800537e:	603b      	str	r3, [r7, #0]
            break;
 8005380:	bf00      	nop
    }

    lcd_send_cmd (col);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	b2db      	uxtb	r3, r3
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff ff70 	bl	800526c <lcd_send_cmd>
}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <lcd_init>:


void lcd_init (void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8005398:	2032      	movs	r0, #50	; 0x32
 800539a:	f7fb f99d 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800539e:	2030      	movs	r0, #48	; 0x30
 80053a0:	f7ff ff64 	bl	800526c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80053a4:	2005      	movs	r0, #5
 80053a6:	f7fb f997 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80053aa:	2030      	movs	r0, #48	; 0x30
 80053ac:	f7ff ff5e 	bl	800526c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fb f991 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80053b6:	2030      	movs	r0, #48	; 0x30
 80053b8:	f7ff ff58 	bl	800526c <lcd_send_cmd>
	HAL_Delay(10);
 80053bc:	200a      	movs	r0, #10
 80053be:	f7fb f98b 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80053c2:	2020      	movs	r0, #32
 80053c4:	f7ff ff52 	bl	800526c <lcd_send_cmd>
	HAL_Delay(10);
 80053c8:	200a      	movs	r0, #10
 80053ca:	f7fb f985 	bl	80006d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80053ce:	2028      	movs	r0, #40	; 0x28
 80053d0:	f7ff ff4c 	bl	800526c <lcd_send_cmd>
	HAL_Delay(1);
 80053d4:	2001      	movs	r0, #1
 80053d6:	f7fb f97f 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80053da:	2008      	movs	r0, #8
 80053dc:	f7ff ff46 	bl	800526c <lcd_send_cmd>
	HAL_Delay(1);
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fb f979 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80053e6:	2001      	movs	r0, #1
 80053e8:	f7ff ff40 	bl	800526c <lcd_send_cmd>
	HAL_Delay(1);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fb f973 	bl	80006d8 <HAL_Delay>
	HAL_Delay(1);
 80053f2:	2001      	movs	r0, #1
 80053f4:	f7fb f970 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80053f8:	2006      	movs	r0, #6
 80053fa:	f7ff ff37 	bl	800526c <lcd_send_cmd>
	HAL_Delay(1);
 80053fe:	2001      	movs	r0, #1
 8005400:	f7fb f96a 	bl	80006d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8005404:	200c      	movs	r0, #12
 8005406:	f7ff ff31 	bl	800526c <lcd_send_cmd>
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}

0800540e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b082      	sub	sp, #8
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8005416:	e006      	b.n	8005426 <lcd_send_string+0x18>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	607a      	str	r2, [r7, #4]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff53 	bl	80052cc <lcd_send_data>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f4      	bne.n	8005418 <lcd_send_string+0xa>
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <MX_I2C1_Init+0x74>)
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <MX_I2C1_Init+0x78>)
 8005440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <MX_I2C1_Init+0x74>)
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <MX_I2C1_Init+0x7c>)
 8005446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005448:	4b18      	ldr	r3, [pc, #96]	; (80054ac <MX_I2C1_Init+0x74>)
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <MX_I2C1_Init+0x74>)
 8005450:	2201      	movs	r2, #1
 8005452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005454:	4b15      	ldr	r3, [pc, #84]	; (80054ac <MX_I2C1_Init+0x74>)
 8005456:	2200      	movs	r2, #0
 8005458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800545a:	4b14      	ldr	r3, [pc, #80]	; (80054ac <MX_I2C1_Init+0x74>)
 800545c:	2200      	movs	r2, #0
 800545e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005460:	4b12      	ldr	r3, [pc, #72]	; (80054ac <MX_I2C1_Init+0x74>)
 8005462:	2200      	movs	r2, #0
 8005464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <MX_I2C1_Init+0x74>)
 8005468:	2200      	movs	r2, #0
 800546a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <MX_I2C1_Init+0x74>)
 800546e:	2200      	movs	r2, #0
 8005470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005472:	480e      	ldr	r0, [pc, #56]	; (80054ac <MX_I2C1_Init+0x74>)
 8005474:	f7fb fc62 	bl	8000d3c <HAL_I2C_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800547e:	f000 fa0b 	bl	8005898 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005482:	2100      	movs	r1, #0
 8005484:	4809      	ldr	r0, [pc, #36]	; (80054ac <MX_I2C1_Init+0x74>)
 8005486:	f7fc f8b3 	bl	80015f0 <HAL_I2CEx_ConfigAnalogFilter>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005490:	f000 fa02 	bl	8005898 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005494:	2100      	movs	r1, #0
 8005496:	4805      	ldr	r0, [pc, #20]	; (80054ac <MX_I2C1_Init+0x74>)
 8005498:	f7fc f8f5 	bl	8001686 <HAL_I2CEx_ConfigDigitalFilter>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054a2:	f000 f9f9 	bl	8005898 <Error_Handler>
  }

}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000228 	.word	0x20000228
 80054b0:	40005400 	.word	0x40005400
 80054b4:	00808cd2 	.word	0x00808cd2

080054b8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <MX_I2C2_Init+0x74>)
 80054be:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <MX_I2C2_Init+0x78>)
 80054c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 80054c2:	4b1a      	ldr	r3, [pc, #104]	; (800552c <MX_I2C2_Init+0x74>)
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <MX_I2C2_Init+0x7c>)
 80054c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80054c8:	4b18      	ldr	r3, [pc, #96]	; (800552c <MX_I2C2_Init+0x74>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054ce:	4b17      	ldr	r3, [pc, #92]	; (800552c <MX_I2C2_Init+0x74>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054d4:	4b15      	ldr	r3, [pc, #84]	; (800552c <MX_I2C2_Init+0x74>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80054da:	4b14      	ldr	r3, [pc, #80]	; (800552c <MX_I2C2_Init+0x74>)
 80054dc:	2200      	movs	r2, #0
 80054de:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054e0:	4b12      	ldr	r3, [pc, #72]	; (800552c <MX_I2C2_Init+0x74>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054e6:	4b11      	ldr	r3, [pc, #68]	; (800552c <MX_I2C2_Init+0x74>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <MX_I2C2_Init+0x74>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80054f2:	480e      	ldr	r0, [pc, #56]	; (800552c <MX_I2C2_Init+0x74>)
 80054f4:	f7fb fc22 	bl	8000d3c <HAL_I2C_Init>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80054fe:	f000 f9cb 	bl	8005898 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005502:	2100      	movs	r1, #0
 8005504:	4809      	ldr	r0, [pc, #36]	; (800552c <MX_I2C2_Init+0x74>)
 8005506:	f7fc f873 	bl	80015f0 <HAL_I2CEx_ConfigAnalogFilter>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005510:	f000 f9c2 	bl	8005898 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005514:	2100      	movs	r1, #0
 8005516:	4805      	ldr	r0, [pc, #20]	; (800552c <MX_I2C2_Init+0x74>)
 8005518:	f7fc f8b5 	bl	8001686 <HAL_I2CEx_ConfigDigitalFilter>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005522:	f000 f9b9 	bl	8005898 <Error_Handler>
  }

}
 8005526:	bf00      	nop
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000274 	.word	0x20000274
 8005530:	40005800 	.word	0x40005800
 8005534:	00808cd2 	.word	0x00808cd2

08005538 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08c      	sub	sp, #48	; 0x30
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005540:	f107 031c 	add.w	r3, r7, #28
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	609a      	str	r2, [r3, #8]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <HAL_I2C_MspInit+0xd8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d129      	bne.n	80055ae <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	6313      	str	r3, [r2, #48]	; 0x30
 8005566:	4b2b      	ldr	r3, [pc, #172]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005572:	f44f 7310 	mov.w	r3, #576	; 0x240
 8005576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005578:	2312      	movs	r3, #18
 800557a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800557c:	2301      	movs	r3, #1
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005580:	2303      	movs	r3, #3
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005584:	2304      	movs	r3, #4
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005588:	f107 031c 	add.w	r3, r7, #28
 800558c:	4619      	mov	r1, r3
 800558e:	4822      	ldr	r0, [pc, #136]	; (8005618 <HAL_I2C_MspInit+0xe0>)
 8005590:	f7fb f9f8 	bl	8000984 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005594:	4b1f      	ldr	r3, [pc, #124]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 800559a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800559e:	6413      	str	r3, [r2, #64]	; 0x40
 80055a0:	4b1c      	ldr	r3, [pc, #112]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a8:	617b      	str	r3, [r7, #20]
 80055aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80055ac:	e02c      	b.n	8005608 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_I2C_MspInit+0xe4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d127      	bne.n	8005608 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055be:	f043 0320 	orr.w	r3, r3, #32
 80055c2:	6313      	str	r3, [r2, #48]	; 0x30
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055d0:	2303      	movs	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055d4:	2312      	movs	r3, #18
 80055d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055d8:	2301      	movs	r3, #1
 80055da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055dc:	2303      	movs	r3, #3
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80055e0:	2304      	movs	r3, #4
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80055e4:	f107 031c 	add.w	r3, r7, #28
 80055e8:	4619      	mov	r1, r3
 80055ea:	480d      	ldr	r0, [pc, #52]	; (8005620 <HAL_I2C_MspInit+0xe8>)
 80055ec:	f7fb f9ca 	bl	8000984 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055f0:	4b08      	ldr	r3, [pc, #32]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	4a07      	ldr	r2, [pc, #28]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055fa:	6413      	str	r3, [r2, #64]	; 0x40
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_I2C_MspInit+0xdc>)
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
}
 8005608:	bf00      	nop
 800560a:	3730      	adds	r7, #48	; 0x30
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40005400 	.word	0x40005400
 8005614:	40023800 	.word	0x40023800
 8005618:	40020400 	.word	0x40020400
 800561c:	40005800 	.word	0x40005800
 8005620:	40021400 	.word	0x40021400

08005624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  // nadanie wartosci wzmocnien regulatora
  PID.Kp = Kp;
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <main+0x98>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <main+0x9c>)
 800562e:	6193      	str	r3, [r2, #24]
  PID.Ki = Ki;
 8005630:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <main+0xa0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a22      	ldr	r2, [pc, #136]	; (80056c0 <main+0x9c>)
 8005636:	61d3      	str	r3, [r2, #28]
  PID.Kd = Kd;
 8005638:	4b23      	ldr	r3, [pc, #140]	; (80056c8 <main+0xa4>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <main+0x9c>)
 800563e:	6213      	str	r3, [r2, #32]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005640:	f7fa ffec 	bl	800061c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005644:	f000 f850 	bl	80056e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005648:	f7ff fcca 	bl	8004fe0 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800564c:	f000 fc46 	bl	8005edc <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8005650:	f7ff fef2 	bl	8005438 <MX_I2C1_Init>
  MX_I2C2_Init();
 8005654:	f7ff ff30 	bl	80054b8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8005658:	f000 fa22 	bl	8005aa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800565c:	f000 fa98 	bl	8005b90 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8005660:	f000 fb60 	bl	8005d24 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8005664:	f000 fb8e 	bl	8005d84 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  BH1750_Init(&hi2c1);
 8005668:	4818      	ldr	r0, [pc, #96]	; (80056cc <main+0xa8>)
 800566a:	f7ff fba9 	bl	8004dc0 <BH1750_Init>
  BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 800566e:	2011      	movs	r0, #17
 8005670:	f7ff fbdc 	bl	8004e2c <BH1750_SetMode>
  lcd_init();
 8005674:	f7ff fe8e 	bl	8005394 <lcd_init>
  arm_pid_init_f32(&PID, 1);
 8005678:	2101      	movs	r1, #1
 800567a:	4811      	ldr	r0, [pc, #68]	; (80056c0 <main+0x9c>)
 800567c:	f7fa ff98 	bl	80005b0 <arm_pid_init_f32>


  HAL_TIM_Base_Start_IT(&htim4);
 8005680:	4813      	ldr	r0, [pc, #76]	; (80056d0 <main+0xac>)
 8005682:	f7fd fa17 	bl	8002ab4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005686:	2100      	movs	r1, #0
 8005688:	4812      	ldr	r0, [pc, #72]	; (80056d4 <main+0xb0>)
 800568a:	f7fd fa73 	bl	8002b74 <HAL_TIM_PWM_Start>


  HAL_UART_Receive_IT(&huart3, &odebrana_wiadomosc, 4);
 800568e:	2204      	movs	r2, #4
 8005690:	4911      	ldr	r1, [pc, #68]	; (80056d8 <main+0xb4>)
 8005692:	4812      	ldr	r0, [pc, #72]	; (80056dc <main+0xb8>)
 8005694:	f7fe fa52 	bl	8003b3c <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	  	BH1750_int = odczytBH1750();
 8005698:	f000 fd08 	bl	80060ac <odczytBH1750>
 800569c:	4602      	mov	r2, r0
 800569e:	4b10      	ldr	r3, [pc, #64]	; (80056e0 <main+0xbc>)
 80056a0:	601a      	str	r2, [r3, #0]
	  	  	  	obliczPID(varZ, BH1750_int, &PID);
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <main+0xc0>)
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <main+0xbc>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <main+0x9c>)
 80056ac:	4619      	mov	r1, r3
 80056ae:	f000 fc9f 	bl	8005ff0 <obliczPID>
	  	  	  	HAL_Delay(100);
 80056b2:	2064      	movs	r0, #100	; 0x64
 80056b4:	f7fb f810 	bl	80006d8 <HAL_Delay>
	  	  	  	BH1750_int = odczytBH1750();
 80056b8:	e7ee      	b.n	8005698 <main+0x74>
 80056ba:	bf00      	nop
 80056bc:	20000008 	.word	0x20000008
 80056c0:	200002c0 	.word	0x200002c0
 80056c4:	20000010 	.word	0x20000010
 80056c8:	2000000c 	.word	0x2000000c
 80056cc:	20000228 	.word	0x20000228
 80056d0:	200002f4 	.word	0x200002f4
 80056d4:	20000334 	.word	0x20000334
 80056d8:	200002e4 	.word	0x200002e4
 80056dc:	20000374 	.word	0x20000374
 80056e0:	20000204 	.word	0x20000204
 80056e4:	20000208 	.word	0x20000208

080056e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b0b4      	sub	sp, #208	; 0xd0
 80056ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80056ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80056f2:	2230      	movs	r2, #48	; 0x30
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fd8c 	bl	8006214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80056fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800570c:	f107 0308 	add.w	r3, r7, #8
 8005710:	2284      	movs	r2, #132	; 0x84
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd7d 	bl	8006214 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800571a:	f7fc f93d 	bl	8001998 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800571e:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <SystemClock_Config+0x120>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a39      	ldr	r2, [pc, #228]	; (8005808 <SystemClock_Config+0x120>)
 8005724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
 800572a:	4b37      	ldr	r3, [pc, #220]	; (8005808 <SystemClock_Config+0x120>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005732:	607b      	str	r3, [r7, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005736:	4b35      	ldr	r3, [pc, #212]	; (800580c <SystemClock_Config+0x124>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800573e:	4a33      	ldr	r2, [pc, #204]	; (800580c <SystemClock_Config+0x124>)
 8005740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b31      	ldr	r3, [pc, #196]	; (800580c <SystemClock_Config+0x124>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005752:	2301      	movs	r3, #1
 8005754:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800575c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005760:	2302      	movs	r3, #2
 8005762:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800576a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800576e:	2304      	movs	r3, #4
 8005770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8005774:	2348      	movs	r3, #72	; 0x48
 8005776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800577a:	2302      	movs	r3, #2
 800577c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005780:	2303      	movs	r3, #3
 8005782:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005786:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800578a:	4618      	mov	r0, r3
 800578c:	f7fc f914 	bl	80019b8 <HAL_RCC_OscConfig>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d001      	beq.n	800579a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8005796:	f000 f87f 	bl	8005898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800579a:	230f      	movs	r3, #15
 800579c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057a0:	2302      	movs	r3, #2
 80057a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80057ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80057ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80057be:	2102      	movs	r1, #2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fc fb69 	bl	8001e98 <HAL_RCC_ClockConfig>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80057cc:	f000 f864 	bl	8005898 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <SystemClock_Config+0x128>)
 80057d2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80057d4:	2300      	movs	r3, #0
 80057d6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80057d8:	2300      	movs	r3, #0
 80057da:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057dc:	2300      	movs	r3, #0
 80057de:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80057e0:	2300      	movs	r3, #0
 80057e2:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057ea:	f107 0308 	add.w	r3, r7, #8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fc fd46 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <SystemClock_Config+0x116>
  {
    Error_Handler();
 80057fa:	f000 f84d 	bl	8005898 <Error_Handler>
  }
}
 80057fe:	bf00      	nop
 8005800:	37d0      	adds	r7, #208	; 0xd0
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	40007000 	.word	0x40007000
 8005810:	0020c180 	.word	0x0020c180

08005814 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a07      	ldr	r2, [pc, #28]	; (8005840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d107      	bne.n	8005836 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		//char bf[15];
			//int siize =sprintf(&bf,"Odczyt: %d",BH1750_int);
			//HAL_UART_Transmit(&huart3, bf, siize, 100);
		obslugaLCD(varZ, BH1750_int);
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f000 fc4f 	bl	80060d4 <obslugaLCD>
	}
}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40000800 	.word	0x40000800
 8005844:	20000208 	.word	0x20000208
 8005848:	20000204 	.word	0x20000204

0800584c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	varZ = atoi(odebrana_wiadomosc);
 8005854:	4807      	ldr	r0, [pc, #28]	; (8005874 <HAL_UART_RxCpltCallback+0x28>)
 8005856:	f000 fcae 	bl	80061b6 <atoi>
 800585a:	4602      	mov	r2, r0
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_UART_RxCpltCallback+0x2c>)
 800585e:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart3, &odebrana_wiadomosc, 4);
 8005860:	2204      	movs	r2, #4
 8005862:	4904      	ldr	r1, [pc, #16]	; (8005874 <HAL_UART_RxCpltCallback+0x28>)
 8005864:	4805      	ldr	r0, [pc, #20]	; (800587c <HAL_UART_RxCpltCallback+0x30>)
 8005866:	f7fe f969 	bl	8003b3c <HAL_UART_Receive_IT>
}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	200002e4 	.word	0x200002e4
 8005878:	20000208 	.word	0x20000208
 800587c:	20000374 	.word	0x20000374

08005880 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	80fb      	strh	r3, [r7, #6]

}
 800588a:	bf00      	nop
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
	...

08005898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800589c:	2200      	movs	r2, #0
 800589e:	2101      	movs	r1, #1
 80058a0:	4808      	ldr	r0, [pc, #32]	; (80058c4 <Error_Handler+0x2c>)
 80058a2:	f7fb fa19 	bl	8000cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80058a6:	2200      	movs	r2, #0
 80058a8:	2180      	movs	r1, #128	; 0x80
 80058aa:	4806      	ldr	r0, [pc, #24]	; (80058c4 <Error_Handler+0x2c>)
 80058ac:	f7fb fa14 	bl	8000cd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80058b0:	2200      	movs	r2, #0
 80058b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058b6:	4803      	ldr	r0, [pc, #12]	; (80058c4 <Error_Handler+0x2c>)
 80058b8:	f7fb fa0e 	bl	8000cd8 <HAL_GPIO_WritePin>
  while(1)
  {
	//  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	  HAL_Delay(100);
 80058bc:	2064      	movs	r0, #100	; 0x64
 80058be:	f7fa ff0b 	bl	80006d8 <HAL_Delay>
 80058c2:	e7fb      	b.n	80058bc <Error_Handler+0x24>
 80058c4:	40020400 	.word	0x40020400

080058c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80058ce:	4b0f      	ldr	r3, [pc, #60]	; (800590c <HAL_MspInit+0x44>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	4a0e      	ldr	r2, [pc, #56]	; (800590c <HAL_MspInit+0x44>)
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6413      	str	r3, [r2, #64]	; 0x40
 80058da:	4b0c      	ldr	r3, [pc, #48]	; (800590c <HAL_MspInit+0x44>)
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	607b      	str	r3, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <HAL_MspInit+0x44>)
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <HAL_MspInit+0x44>)
 80058ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f0:	6453      	str	r3, [r2, #68]	; 0x44
 80058f2:	4b06      	ldr	r3, [pc, #24]	; (800590c <HAL_MspInit+0x44>)
 80058f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800

08005910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005914:	bf00      	nop
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800591e:	b480      	push	{r7}
 8005920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005922:	e7fe      	b.n	8005922 <HardFault_Handler+0x4>

08005924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005928:	e7fe      	b.n	8005928 <MemManage_Handler+0x4>

0800592a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800592a:	b480      	push	{r7}
 800592c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800592e:	e7fe      	b.n	800592e <BusFault_Handler+0x4>

08005930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005930:	b480      	push	{r7}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005934:	e7fe      	b.n	8005934 <UsageFault_Handler+0x4>

08005936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005936:	b480      	push	{r7}
 8005938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005952:	b480      	push	{r7}
 8005954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005956:	bf00      	nop
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005964:	f7fa fe98 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005968:	bf00      	nop
 800596a:	bd80      	pop	{r7, pc}

0800596c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005970:	2001      	movs	r0, #1
 8005972:	f7fb f9cb 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}

0800597a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800597e:	2008      	movs	r0, #8
 8005980:	f7fb f9c4 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005984:	bf00      	nop
 8005986:	bd80      	pop	{r7, pc}

08005988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800598c:	4802      	ldr	r0, [pc, #8]	; (8005998 <TIM3_IRQHandler+0x10>)
 800598e:	f7fd f935 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005992:	bf00      	nop
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000334 	.word	0x20000334

0800599c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80059a0:	4802      	ldr	r0, [pc, #8]	; (80059ac <TIM4_IRQHandler+0x10>)
 80059a2:	f7fd f92b 	bl	8002bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200002f4 	.word	0x200002f4

080059b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80059b4:	4802      	ldr	r0, [pc, #8]	; (80059c0 <USART3_IRQHandler+0x10>)
 80059b6:	f7fe f963 	bl	8003c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000374 	.word	0x20000374

080059c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80059c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80059cc:	f7fb f99e 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80059d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80059d4:	f7fb f99a 	bl	8000d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80059d8:	bf00      	nop
 80059da:	bd80      	pop	{r7, pc}

080059dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <_sbrk+0x50>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <_sbrk+0x16>
		heap_end = &end;
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <_sbrk+0x50>)
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <_sbrk+0x54>)
 80059f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80059f2:	4b0e      	ldr	r3, [pc, #56]	; (8005a2c <_sbrk+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <_sbrk+0x50>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4413      	add	r3, r2
 8005a00:	466a      	mov	r2, sp
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d907      	bls.n	8005a16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005a06:	f000 fbdb 	bl	80061c0 <__errno>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	230c      	movs	r3, #12
 8005a0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	e006      	b.n	8005a24 <_sbrk+0x48>
	}

	heap_end += incr;
 8005a16:	4b05      	ldr	r3, [pc, #20]	; (8005a2c <_sbrk+0x50>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4a03      	ldr	r2, [pc, #12]	; (8005a2c <_sbrk+0x50>)
 8005a20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	2000020c 	.word	0x2000020c
 8005a30:	20000880 	.word	0x20000880

08005a34 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <SystemInit+0x5c>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	4a14      	ldr	r2, [pc, #80]	; (8005a90 <SystemInit+0x5c>)
 8005a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005a48:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <SystemInit+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a11      	ldr	r2, [pc, #68]	; (8005a94 <SystemInit+0x60>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005a54:	4b0f      	ldr	r3, [pc, #60]	; (8005a94 <SystemInit+0x60>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <SystemInit+0x60>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	490d      	ldr	r1, [pc, #52]	; (8005a94 <SystemInit+0x60>)
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <SystemInit+0x64>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <SystemInit+0x60>)
 8005a68:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <SystemInit+0x68>)
 8005a6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005a6c:	4b09      	ldr	r3, [pc, #36]	; (8005a94 <SystemInit+0x60>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <SystemInit+0x60>)
 8005a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005a78:	4b06      	ldr	r3, [pc, #24]	; (8005a94 <SystemInit+0x60>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005a7e:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <SystemInit+0x5c>)
 8005a80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a84:	609a      	str	r2, [r3, #8]
#endif
}
 8005a86:	bf00      	nop
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	e000ed00 	.word	0xe000ed00
 8005a94:	40023800 	.word	0x40023800
 8005a98:	fef6ffff 	.word	0xfef6ffff
 8005a9c:	24003010 	.word	0x24003010

08005aa0 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	; 0x38
 8005aa4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	605a      	str	r2, [r3, #4]
 8005ab0:	609a      	str	r2, [r3, #8]
 8005ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ab4:	f107 031c 	add.w	r3, r7, #28
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	605a      	str	r2, [r3, #4]
 8005abe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ac0:	463b      	mov	r3, r7
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	60da      	str	r2, [r3, #12]
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	615a      	str	r2, [r3, #20]
 8005ad0:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8005ad2:	4b2d      	ldr	r3, [pc, #180]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005ad4:	4a2d      	ldr	r2, [pc, #180]	; (8005b8c <MX_TIM3_Init+0xec>)
 8005ad6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8005ad8:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005ada:	2247      	movs	r2, #71	; 0x47
 8005adc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ade:	4b2a      	ldr	r3, [pc, #168]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8005ae4:	4b28      	ldr	r3, [pc, #160]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005aea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aec:	4b26      	ldr	r3, [pc, #152]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005af2:	4b25      	ldr	r3, [pc, #148]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005af8:	4823      	ldr	r0, [pc, #140]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005afa:	f7fc ffaf 	bl	8002a5c <HAL_TIM_Base_Init>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005b04:	f7ff fec8 	bl	8005898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b12:	4619      	mov	r1, r3
 8005b14:	481c      	ldr	r0, [pc, #112]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005b16:	f7fd faa9 	bl	800306c <HAL_TIM_ConfigClockSource>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005b20:	f7ff feba 	bl	8005898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005b24:	4818      	ldr	r0, [pc, #96]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005b26:	f7fc ffef 	bl	8002b08 <HAL_TIM_PWM_Init>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005b30:	f7ff feb2 	bl	8005898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b3c:	f107 031c 	add.w	r3, r7, #28
 8005b40:	4619      	mov	r1, r3
 8005b42:	4811      	ldr	r0, [pc, #68]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005b44:	f7fd ff32 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005b4e:	f7ff fea3 	bl	8005898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b52:	2360      	movs	r3, #96	; 0x60
 8005b54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b62:	463b      	mov	r3, r7
 8005b64:	2200      	movs	r2, #0
 8005b66:	4619      	mov	r1, r3
 8005b68:	4807      	ldr	r0, [pc, #28]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005b6a:	f7fd f967 	bl	8002e3c <HAL_TIM_PWM_ConfigChannel>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005b74:	f7ff fe90 	bl	8005898 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8005b78:	4803      	ldr	r0, [pc, #12]	; (8005b88 <MX_TIM3_Init+0xe8>)
 8005b7a:	f000 f89b 	bl	8005cb4 <HAL_TIM_MspPostInit>

}
 8005b7e:	bf00      	nop
 8005b80:	3738      	adds	r7, #56	; 0x38
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20000334 	.word	0x20000334
 8005b8c:	40000400 	.word	0x40000400

08005b90 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b96:	f107 0310 	add.w	r3, r7, #16
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	609a      	str	r2, [r3, #8]
 8005ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ba4:	1d3b      	adds	r3, r7, #4
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	605a      	str	r2, [r3, #4]
 8005bac:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8005bae:	4b1e      	ldr	r3, [pc, #120]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <MX_TIM4_Init+0x9c>)
 8005bb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bb6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8005bba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8005bc2:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bc4:	f242 720f 	movw	r2, #9999	; 0x270f
 8005bc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bca:	4b17      	ldr	r3, [pc, #92]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bd0:	4b15      	ldr	r3, [pc, #84]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005bd6:	4814      	ldr	r0, [pc, #80]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bd8:	f7fc ff40 	bl	8002a5c <HAL_TIM_Base_Init>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8005be2:	f7ff fe59 	bl	8005898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005bec:	f107 0310 	add.w	r3, r7, #16
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	480d      	ldr	r0, [pc, #52]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005bf4:	f7fd fa3a 	bl	800306c <HAL_TIM_ConfigClockSource>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8005bfe:	f7ff fe4b 	bl	8005898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4806      	ldr	r0, [pc, #24]	; (8005c28 <MX_TIM4_Init+0x98>)
 8005c10:	f7fd fecc 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8005c1a:	f7ff fe3d 	bl	8005898 <Error_Handler>
  }

}
 8005c1e:	bf00      	nop
 8005c20:	3720      	adds	r7, #32
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200002f4 	.word	0x200002f4
 8005c2c:	40000800 	.word	0x40000800

08005c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <HAL_TIM_Base_MspInit+0x78>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d114      	bne.n	8005c6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c42:	4b1a      	ldr	r3, [pc, #104]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	4a19      	ldr	r2, [pc, #100]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c48:	f043 0302 	orr.w	r3, r3, #2
 8005c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4e:	4b17      	ldr	r3, [pc, #92]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	60fb      	str	r3, [r7, #12]
 8005c58:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	2100      	movs	r1, #0
 8005c5e:	201d      	movs	r0, #29
 8005c60:	f7fa fe37 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c64:	201d      	movs	r0, #29
 8005c66:	f7fa fe50 	bl	800090a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005c6a:	e018      	b.n	8005c9e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a0f      	ldr	r2, [pc, #60]	; (8005cb0 <HAL_TIM_Base_MspInit+0x80>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d113      	bne.n	8005c9e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c7c:	f043 0304 	orr.w	r3, r3, #4
 8005c80:	6413      	str	r3, [r2, #64]	; 0x40
 8005c82:	4b0a      	ldr	r3, [pc, #40]	; (8005cac <HAL_TIM_Base_MspInit+0x7c>)
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2100      	movs	r1, #0
 8005c92:	201e      	movs	r0, #30
 8005c94:	f7fa fe1d 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005c98:	201e      	movs	r0, #30
 8005c9a:	f7fa fe36 	bl	800090a <HAL_NVIC_EnableIRQ>
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40000400 	.word	0x40000400
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	40000800 	.word	0x40000800

08005cb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cbc:	f107 030c 	add.w	r3, r7, #12
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	60da      	str	r2, [r3, #12]
 8005cca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a11      	ldr	r2, [pc, #68]	; (8005d18 <HAL_TIM_MspPostInit+0x64>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d11b      	bne.n	8005d0e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cd6:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005cdc:	f043 0301 	orr.w	r3, r3, #1
 8005ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <HAL_TIM_MspPostInit+0x68>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]
 8005cec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005cee:	2340      	movs	r3, #64	; 0x40
 8005cf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	4619      	mov	r1, r3
 8005d08:	4805      	ldr	r0, [pc, #20]	; (8005d20 <HAL_TIM_MspPostInit+0x6c>)
 8005d0a:	f7fa fe3b 	bl	8000984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005d0e:	bf00      	nop
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40023800 	.word	0x40023800
 8005d20:	40020000 	.word	0x40020000

08005d24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <MX_USART2_UART_Init+0x5c>)
 8005d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005d42:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d4a:	220c      	movs	r2, #12
 8005d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d54:	4b09      	ldr	r3, [pc, #36]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d5a:	4b08      	ldr	r3, [pc, #32]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005d66:	4805      	ldr	r0, [pc, #20]	; (8005d7c <MX_USART2_UART_Init+0x58>)
 8005d68:	f7fd fe9a 	bl	8003aa0 <HAL_UART_Init>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005d72:	f7ff fd91 	bl	8005898 <Error_Handler>
  }

}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200003f4 	.word	0x200003f4
 8005d80:	40004400 	.word	0x40004400

08005d84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8005d88:	4b14      	ldr	r3, [pc, #80]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005d8a:	4a15      	ldr	r2, [pc, #84]	; (8005de0 <MX_USART3_UART_Init+0x5c>)
 8005d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005d90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d9c:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005da2:	4b0e      	ldr	r3, [pc, #56]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005daa:	220c      	movs	r2, #12
 8005dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005dae:	4b0b      	ldr	r3, [pc, #44]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005dba:	4b08      	ldr	r3, [pc, #32]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005dc6:	4805      	ldr	r0, [pc, #20]	; (8005ddc <MX_USART3_UART_Init+0x58>)
 8005dc8:	f7fd fe6a 	bl	8003aa0 <HAL_UART_Init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005dd2:	f7ff fd61 	bl	8005898 <Error_Handler>
  }

}
 8005dd6:	bf00      	nop
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000374 	.word	0x20000374
 8005de0:	40004800 	.word	0x40004800

08005de4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	; 0x30
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	f107 031c 	add.w	r3, r7, #28
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a32      	ldr	r2, [pc, #200]	; (8005ecc <HAL_UART_MspInit+0xe8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d128      	bne.n	8005e58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005e06:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	4a31      	ldr	r2, [pc, #196]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e10:	6413      	str	r3, [r2, #64]	; 0x40
 8005e12:	4b2f      	ldr	r3, [pc, #188]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e1e:	4b2c      	ldr	r3, [pc, #176]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a2b      	ldr	r2, [pc, #172]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e24:	f043 0308 	orr.w	r3, r3, #8
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b29      	ldr	r3, [pc, #164]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005e36:	2360      	movs	r3, #96	; 0x60
 8005e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e42:	2303      	movs	r3, #3
 8005e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005e46:	2307      	movs	r3, #7
 8005e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e4a:	f107 031c 	add.w	r3, r7, #28
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4820      	ldr	r0, [pc, #128]	; (8005ed4 <HAL_UART_MspInit+0xf0>)
 8005e52:	f7fa fd97 	bl	8000984 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005e56:	e035      	b.n	8005ec4 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ed8 <HAL_UART_MspInit+0xf4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	4a1a      	ldr	r2, [pc, #104]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e7a:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7e:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	6313      	str	r3, [r2, #48]	; 0x30
 8005e86:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <HAL_UART_MspInit+0xec>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005ea4:	2307      	movs	r3, #7
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ea8:	f107 031c 	add.w	r3, r7, #28
 8005eac:	4619      	mov	r1, r3
 8005eae:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <HAL_UART_MspInit+0xf0>)
 8005eb0:	f7fa fd68 	bl	8000984 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	2027      	movs	r0, #39	; 0x27
 8005eba:	f7fa fd0a 	bl	80008d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005ebe:	2027      	movs	r0, #39	; 0x27
 8005ec0:	f7fa fd23 	bl	800090a <HAL_NVIC_EnableIRQ>
}
 8005ec4:	bf00      	nop
 8005ec6:	3730      	adds	r7, #48	; 0x30
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40004400 	.word	0x40004400
 8005ed0:	40023800 	.word	0x40023800
 8005ed4:	40020c00 	.word	0x40020c00
 8005ed8:	40004800 	.word	0x40004800

08005edc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005ee0:	4b14      	ldr	r3, [pc, #80]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ee2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005ee6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005ee8:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005eea:	2206      	movs	r2, #6
 8005eec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005eee:	4b11      	ldr	r3, [pc, #68]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005efa:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005efc:	2202      	movs	r2, #2
 8005efe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005f06:	4b0b      	ldr	r3, [pc, #44]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005f12:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005f18:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005f1e:	4805      	ldr	r0, [pc, #20]	; (8005f34 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005f20:	f7fb fbfd 	bl	800171e <HAL_PCD_Init>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005f2a:	f7ff fcb5 	bl	8005898 <Error_Handler>
  }

}
 8005f2e:	bf00      	nop
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000474 	.word	0x20000474

08005f38 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08a      	sub	sp, #40	; 0x28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f40:	f107 0314 	add.w	r3, r7, #20
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	605a      	str	r2, [r3, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	60da      	str	r2, [r3, #12]
 8005f4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f58:	d141      	bne.n	8005fde <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f5a:	4b23      	ldr	r3, [pc, #140]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5e:	4a22      	ldr	r2, [pc, #136]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	6313      	str	r3, [r2, #48]	; 0x30
 8005f66:	4b20      	ldr	r3, [pc, #128]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	613b      	str	r3, [r7, #16]
 8005f70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005f72:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8005f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f78:	2302      	movs	r3, #2
 8005f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f80:	2303      	movs	r3, #3
 8005f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005f84:	230a      	movs	r3, #10
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f88:	f107 0314 	add.w	r3, r7, #20
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	4817      	ldr	r0, [pc, #92]	; (8005fec <HAL_PCD_MspInit+0xb4>)
 8005f90:	f7fa fcf8 	bl	8000984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8005f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005fa2:	f107 0314 	add.w	r3, r7, #20
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4810      	ldr	r0, [pc, #64]	; (8005fec <HAL_PCD_MspInit+0xb4>)
 8005faa:	f7fa fceb 	bl	8000984 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005fae:	4b0e      	ldr	r3, [pc, #56]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	4a0d      	ldr	r2, [pc, #52]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb8:	6353      	str	r3, [r2, #52]	; 0x34
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4b08      	ldr	r3, [pc, #32]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	4a07      	ldr	r2, [pc, #28]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd2:	4b05      	ldr	r3, [pc, #20]	; (8005fe8 <HAL_PCD_MspInit+0xb0>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fda:	60bb      	str	r3, [r7, #8]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005fde:	bf00      	nop
 8005fe0:	3728      	adds	r7, #40	; 0x28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	40023800 	.word	0x40023800
 8005fec:	40020000 	.word	0x40020000

08005ff0 <obliczPID>:
 *  @param varO Drugi argument typu int bedacy wartoscia odczytana z czujnika
 *  @param PID Trzeci argument jest wskaznikiem na instancje regulatora
 *  @retval brak
 */
void obliczPID(int varZ, int varO, arm_pid_instance_f32 * PID)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	; 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
	int wypelnienie;
	wypelnienie = arm_pid_f32(PID, varZ - varO); //obliczanie wypelnienia dzieki funkcji z biblioteki cmsis
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	edc7 7a05 	vstr	s15, [r7, #20]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	ed93 7a00 	vldr	s14, [r3]
 8006018:	edd7 7a05 	vldr	s15, [r7, #20]
 800601c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	edd3 6a01 	vldr	s13, [r3, #4]
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	edd3 7a03 	vldr	s15, [r3, #12]
 800602c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8006030:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	edd3 6a02 	vldr	s13, [r3, #8]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	edd3 7a04 	vldr	s15, [r3, #16]
 8006040:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006044:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800604e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006052:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Update state */
    S->state[1] = S->state[0];
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800606a:	edd7 7a04 	vldr	s15, [r7, #16]
 800606e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006072:	ee17 3a90 	vmov	r3, s15
 8006076:	61fb      	str	r3, [r7, #28]
	/* Ogranicznik */
	if (wypelnienie < 0) wypelnienie = 0;
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da02      	bge.n	8006084 <obliczPID+0x94>
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	e006      	b.n	8006092 <obliczPID+0xa2>
	else if (wypelnienie > 1000) wypelnienie = 1000;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608a:	dd02      	ble.n	8006092 <obliczPID+0xa2>
 800608c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006090:	61fb      	str	r3, [r7, #28]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, wypelnienie); //Zadaje wypelnienie PWM
 8006092:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <obliczPID+0xb8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	635a      	str	r2, [r3, #52]	; 0x34
}
 800609a:	bf00      	nop
 800609c:	3724      	adds	r7, #36	; 0x24
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000334 	.word	0x20000334

080060ac <odczytBH1750>:
 *  @brief Ta funkcja odczytuje natezenie swiatla z czujnika BH1750, nie przyjmuje zadnych argumentow

 *  @retval Wartosc natezenia wyrazona w LUX
 */
int odczytBH1750()
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
	float odczyt_float;
	int odczyt_int;
	BH1750_ReadLight(&odczyt_float); //ODCZYT WARTOSCI DO PRZEKAZANEJ ZMIENNEJ
 80060b2:	463b      	mov	r3, r7
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe ff39 	bl	8004f2c <BH1750_ReadLight>
	odczyt_int = odczyt_float;
 80060ba:	edd7 7a00 	vldr	s15, [r7]
 80060be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060c2:	ee17 3a90 	vmov	r3, s15
 80060c6:	607b      	str	r3, [r7, #4]
	return odczyt_int;
 80060c8:	687b      	ldr	r3, [r7, #4]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <obslugaLCD>:
 *  @param varO Drugi argument typu int bedacy wartoscia odczytana z czujnika z zakresu 0-99999999
 *
 *  @retval brak
 */
void obslugaLCD(int varZ, int varO)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
		  char bufor_wiadomosci[16];
		  lcd_clear();
 80060de:	f7ff f925 	bl	800532c <lcd_clear>
		  lcd_put_cur(0, 0); // od tego miejsca zaczynamy wprowadzac znaki
 80060e2:	2100      	movs	r1, #0
 80060e4:	2000      	movs	r0, #0
 80060e6:	f7ff f937 	bl	8005358 <lcd_put_cur>
		  if(varZ > 9999999) // zabezpieczenie
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <obslugaLCD+0x78>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	dd03      	ble.n	80060fa <obslugaLCD+0x26>
		  {
			  lcd_send_string("Za duza liczba");
 80060f2:	4817      	ldr	r0, [pc, #92]	; (8006150 <obslugaLCD+0x7c>)
 80060f4:	f7ff f98b 	bl	800540e <lcd_send_string>
		  lcd_send_string(bufor_wiadomosci); // wysylanie wiadomosci
		  lcd_put_cur(1, 0); // zmiana miejsca wpisywania tekstu na druga linie
		  sprintf(&bufor_wiadomosci, "Odczyt: %d", varO);
		  lcd_send_string(bufor_wiadomosci); // wysylanie wiadomosci
		  }
}
 80060f8:	e023      	b.n	8006142 <obslugaLCD+0x6e>
		  else if(varZ<-9999999)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a15      	ldr	r2, [pc, #84]	; (8006154 <obslugaLCD+0x80>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	da03      	bge.n	800610a <obslugaLCD+0x36>
			  lcd_send_string("Za mala liczba");
 8006102:	4815      	ldr	r0, [pc, #84]	; (8006158 <obslugaLCD+0x84>)
 8006104:	f7ff f983 	bl	800540e <lcd_send_string>
}
 8006108:	e01b      	b.n	8006142 <obslugaLCD+0x6e>
		  sprintf(&bufor_wiadomosci, "Zadana: %d", varZ);
 800610a:	f107 0308 	add.w	r3, r7, #8
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	4912      	ldr	r1, [pc, #72]	; (800615c <obslugaLCD+0x88>)
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f886 	bl	8006224 <siprintf>
		  lcd_send_string(bufor_wiadomosci); // wysylanie wiadomosci
 8006118:	f107 0308 	add.w	r3, r7, #8
 800611c:	4618      	mov	r0, r3
 800611e:	f7ff f976 	bl	800540e <lcd_send_string>
		  lcd_put_cur(1, 0); // zmiana miejsca wpisywania tekstu na druga linie
 8006122:	2100      	movs	r1, #0
 8006124:	2001      	movs	r0, #1
 8006126:	f7ff f917 	bl	8005358 <lcd_put_cur>
		  sprintf(&bufor_wiadomosci, "Odczyt: %d", varO);
 800612a:	f107 0308 	add.w	r3, r7, #8
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	490b      	ldr	r1, [pc, #44]	; (8006160 <obslugaLCD+0x8c>)
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f876 	bl	8006224 <siprintf>
		  lcd_send_string(bufor_wiadomosci); // wysylanie wiadomosci
 8006138:	f107 0308 	add.w	r3, r7, #8
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff f966 	bl	800540e <lcd_send_string>
}
 8006142:	bf00      	nop
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	0098967f 	.word	0x0098967f
 8006150:	08006bb4 	.word	0x08006bb4
 8006154:	ff676981 	.word	0xff676981
 8006158:	08006bc4 	.word	0x08006bc4
 800615c:	08006bd4 	.word	0x08006bd4
 8006160:	08006be0 	.word	0x08006be0

08006164 <Reset_Handler>:
 8006164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800619c <LoopFillZerobss+0x14>
 8006168:	2100      	movs	r1, #0
 800616a:	e003      	b.n	8006174 <LoopCopyDataInit>

0800616c <CopyDataInit>:
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <LoopFillZerobss+0x18>)
 800616e:	585b      	ldr	r3, [r3, r1]
 8006170:	5043      	str	r3, [r0, r1]
 8006172:	3104      	adds	r1, #4

08006174 <LoopCopyDataInit>:
 8006174:	480b      	ldr	r0, [pc, #44]	; (80061a4 <LoopFillZerobss+0x1c>)
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <LoopFillZerobss+0x20>)
 8006178:	1842      	adds	r2, r0, r1
 800617a:	429a      	cmp	r2, r3
 800617c:	d3f6      	bcc.n	800616c <CopyDataInit>
 800617e:	4a0b      	ldr	r2, [pc, #44]	; (80061ac <LoopFillZerobss+0x24>)
 8006180:	e002      	b.n	8006188 <LoopFillZerobss>

08006182 <FillZerobss>:
 8006182:	2300      	movs	r3, #0
 8006184:	f842 3b04 	str.w	r3, [r2], #4

08006188 <LoopFillZerobss>:
 8006188:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <LoopFillZerobss+0x28>)
 800618a:	429a      	cmp	r2, r3
 800618c:	d3f9      	bcc.n	8006182 <FillZerobss>
 800618e:	f7ff fc51 	bl	8005a34 <SystemInit>
 8006192:	f000 f81b 	bl	80061cc <__libc_init_array>
 8006196:	f7ff fa45 	bl	8005624 <main>
 800619a:	4770      	bx	lr
 800619c:	20050000 	.word	0x20050000
 80061a0:	08006d54 	.word	0x08006d54
 80061a4:	20000000 	.word	0x20000000
 80061a8:	200001e8 	.word	0x200001e8
 80061ac:	200001e8 	.word	0x200001e8
 80061b0:	2000087c 	.word	0x2000087c

080061b4 <ADC_IRQHandler>:
 80061b4:	e7fe      	b.n	80061b4 <ADC_IRQHandler>

080061b6 <atoi>:
 80061b6:	220a      	movs	r2, #10
 80061b8:	2100      	movs	r1, #0
 80061ba:	f000 b8cf 	b.w	800635c <strtol>
	...

080061c0 <__errno>:
 80061c0:	4b01      	ldr	r3, [pc, #4]	; (80061c8 <__errno+0x8>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000018 	.word	0x20000018

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	4e0d      	ldr	r6, [pc, #52]	; (8006204 <__libc_init_array+0x38>)
 80061d0:	4c0d      	ldr	r4, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d2:	1ba4      	subs	r4, r4, r6
 80061d4:	10a4      	asrs	r4, r4, #2
 80061d6:	2500      	movs	r5, #0
 80061d8:	42a5      	cmp	r5, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	4e0b      	ldr	r6, [pc, #44]	; (800620c <__libc_init_array+0x40>)
 80061de:	4c0c      	ldr	r4, [pc, #48]	; (8006210 <__libc_init_array+0x44>)
 80061e0:	f000 fcdc 	bl	8006b9c <_init>
 80061e4:	1ba4      	subs	r4, r4, r6
 80061e6:	10a4      	asrs	r4, r4, #2
 80061e8:	2500      	movs	r5, #0
 80061ea:	42a5      	cmp	r5, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061f4:	4798      	blx	r3
 80061f6:	3501      	adds	r5, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80061fe:	4798      	blx	r3
 8006200:	3501      	adds	r5, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08006d4c 	.word	0x08006d4c
 8006208:	08006d4c 	.word	0x08006d4c
 800620c:	08006d4c 	.word	0x08006d4c
 8006210:	08006d50 	.word	0x08006d50

08006214 <memset>:
 8006214:	4402      	add	r2, r0
 8006216:	4603      	mov	r3, r0
 8006218:	4293      	cmp	r3, r2
 800621a:	d100      	bne.n	800621e <memset+0xa>
 800621c:	4770      	bx	lr
 800621e:	f803 1b01 	strb.w	r1, [r3], #1
 8006222:	e7f9      	b.n	8006218 <memset+0x4>

08006224 <siprintf>:
 8006224:	b40e      	push	{r1, r2, r3}
 8006226:	b500      	push	{lr}
 8006228:	b09c      	sub	sp, #112	; 0x70
 800622a:	ab1d      	add	r3, sp, #116	; 0x74
 800622c:	9002      	str	r0, [sp, #8]
 800622e:	9006      	str	r0, [sp, #24]
 8006230:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006234:	4809      	ldr	r0, [pc, #36]	; (800625c <siprintf+0x38>)
 8006236:	9107      	str	r1, [sp, #28]
 8006238:	9104      	str	r1, [sp, #16]
 800623a:	4909      	ldr	r1, [pc, #36]	; (8006260 <siprintf+0x3c>)
 800623c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006240:	9105      	str	r1, [sp, #20]
 8006242:	6800      	ldr	r0, [r0, #0]
 8006244:	9301      	str	r3, [sp, #4]
 8006246:	a902      	add	r1, sp, #8
 8006248:	f000 f90e 	bl	8006468 <_svfiprintf_r>
 800624c:	9b02      	ldr	r3, [sp, #8]
 800624e:	2200      	movs	r2, #0
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	b01c      	add	sp, #112	; 0x70
 8006254:	f85d eb04 	ldr.w	lr, [sp], #4
 8006258:	b003      	add	sp, #12
 800625a:	4770      	bx	lr
 800625c:	20000018 	.word	0x20000018
 8006260:	ffff0208 	.word	0xffff0208

08006264 <_strtol_l.isra.0>:
 8006264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006268:	4680      	mov	r8, r0
 800626a:	4689      	mov	r9, r1
 800626c:	4692      	mov	sl, r2
 800626e:	461e      	mov	r6, r3
 8006270:	460f      	mov	r7, r1
 8006272:	463d      	mov	r5, r7
 8006274:	9808      	ldr	r0, [sp, #32]
 8006276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800627a:	f000 f885 	bl	8006388 <__locale_ctype_ptr_l>
 800627e:	4420      	add	r0, r4
 8006280:	7843      	ldrb	r3, [r0, #1]
 8006282:	f013 0308 	ands.w	r3, r3, #8
 8006286:	d132      	bne.n	80062ee <_strtol_l.isra.0+0x8a>
 8006288:	2c2d      	cmp	r4, #45	; 0x2d
 800628a:	d132      	bne.n	80062f2 <_strtol_l.isra.0+0x8e>
 800628c:	787c      	ldrb	r4, [r7, #1]
 800628e:	1cbd      	adds	r5, r7, #2
 8006290:	2201      	movs	r2, #1
 8006292:	2e00      	cmp	r6, #0
 8006294:	d05d      	beq.n	8006352 <_strtol_l.isra.0+0xee>
 8006296:	2e10      	cmp	r6, #16
 8006298:	d109      	bne.n	80062ae <_strtol_l.isra.0+0x4a>
 800629a:	2c30      	cmp	r4, #48	; 0x30
 800629c:	d107      	bne.n	80062ae <_strtol_l.isra.0+0x4a>
 800629e:	782b      	ldrb	r3, [r5, #0]
 80062a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062a4:	2b58      	cmp	r3, #88	; 0x58
 80062a6:	d14f      	bne.n	8006348 <_strtol_l.isra.0+0xe4>
 80062a8:	786c      	ldrb	r4, [r5, #1]
 80062aa:	2610      	movs	r6, #16
 80062ac:	3502      	adds	r5, #2
 80062ae:	2a00      	cmp	r2, #0
 80062b0:	bf14      	ite	ne
 80062b2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80062b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80062ba:	2700      	movs	r7, #0
 80062bc:	fbb1 fcf6 	udiv	ip, r1, r6
 80062c0:	4638      	mov	r0, r7
 80062c2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80062c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d817      	bhi.n	80062fe <_strtol_l.isra.0+0x9a>
 80062ce:	461c      	mov	r4, r3
 80062d0:	42a6      	cmp	r6, r4
 80062d2:	dd23      	ble.n	800631c <_strtol_l.isra.0+0xb8>
 80062d4:	1c7b      	adds	r3, r7, #1
 80062d6:	d007      	beq.n	80062e8 <_strtol_l.isra.0+0x84>
 80062d8:	4584      	cmp	ip, r0
 80062da:	d31c      	bcc.n	8006316 <_strtol_l.isra.0+0xb2>
 80062dc:	d101      	bne.n	80062e2 <_strtol_l.isra.0+0x7e>
 80062de:	45a6      	cmp	lr, r4
 80062e0:	db19      	blt.n	8006316 <_strtol_l.isra.0+0xb2>
 80062e2:	fb00 4006 	mla	r0, r0, r6, r4
 80062e6:	2701      	movs	r7, #1
 80062e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062ec:	e7eb      	b.n	80062c6 <_strtol_l.isra.0+0x62>
 80062ee:	462f      	mov	r7, r5
 80062f0:	e7bf      	b.n	8006272 <_strtol_l.isra.0+0xe>
 80062f2:	2c2b      	cmp	r4, #43	; 0x2b
 80062f4:	bf04      	itt	eq
 80062f6:	1cbd      	addeq	r5, r7, #2
 80062f8:	787c      	ldrbeq	r4, [r7, #1]
 80062fa:	461a      	mov	r2, r3
 80062fc:	e7c9      	b.n	8006292 <_strtol_l.isra.0+0x2e>
 80062fe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006302:	2b19      	cmp	r3, #25
 8006304:	d801      	bhi.n	800630a <_strtol_l.isra.0+0xa6>
 8006306:	3c37      	subs	r4, #55	; 0x37
 8006308:	e7e2      	b.n	80062d0 <_strtol_l.isra.0+0x6c>
 800630a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800630e:	2b19      	cmp	r3, #25
 8006310:	d804      	bhi.n	800631c <_strtol_l.isra.0+0xb8>
 8006312:	3c57      	subs	r4, #87	; 0x57
 8006314:	e7dc      	b.n	80062d0 <_strtol_l.isra.0+0x6c>
 8006316:	f04f 37ff 	mov.w	r7, #4294967295
 800631a:	e7e5      	b.n	80062e8 <_strtol_l.isra.0+0x84>
 800631c:	1c7b      	adds	r3, r7, #1
 800631e:	d108      	bne.n	8006332 <_strtol_l.isra.0+0xce>
 8006320:	2322      	movs	r3, #34	; 0x22
 8006322:	f8c8 3000 	str.w	r3, [r8]
 8006326:	4608      	mov	r0, r1
 8006328:	f1ba 0f00 	cmp.w	sl, #0
 800632c:	d107      	bne.n	800633e <_strtol_l.isra.0+0xda>
 800632e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006332:	b102      	cbz	r2, 8006336 <_strtol_l.isra.0+0xd2>
 8006334:	4240      	negs	r0, r0
 8006336:	f1ba 0f00 	cmp.w	sl, #0
 800633a:	d0f8      	beq.n	800632e <_strtol_l.isra.0+0xca>
 800633c:	b10f      	cbz	r7, 8006342 <_strtol_l.isra.0+0xde>
 800633e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006342:	f8ca 9000 	str.w	r9, [sl]
 8006346:	e7f2      	b.n	800632e <_strtol_l.isra.0+0xca>
 8006348:	2430      	movs	r4, #48	; 0x30
 800634a:	2e00      	cmp	r6, #0
 800634c:	d1af      	bne.n	80062ae <_strtol_l.isra.0+0x4a>
 800634e:	2608      	movs	r6, #8
 8006350:	e7ad      	b.n	80062ae <_strtol_l.isra.0+0x4a>
 8006352:	2c30      	cmp	r4, #48	; 0x30
 8006354:	d0a3      	beq.n	800629e <_strtol_l.isra.0+0x3a>
 8006356:	260a      	movs	r6, #10
 8006358:	e7a9      	b.n	80062ae <_strtol_l.isra.0+0x4a>
	...

0800635c <strtol>:
 800635c:	4b08      	ldr	r3, [pc, #32]	; (8006380 <strtol+0x24>)
 800635e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006360:	681c      	ldr	r4, [r3, #0]
 8006362:	4d08      	ldr	r5, [pc, #32]	; (8006384 <strtol+0x28>)
 8006364:	6a23      	ldr	r3, [r4, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bf08      	it	eq
 800636a:	462b      	moveq	r3, r5
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	460a      	mov	r2, r1
 8006372:	4601      	mov	r1, r0
 8006374:	4620      	mov	r0, r4
 8006376:	f7ff ff75 	bl	8006264 <_strtol_l.isra.0>
 800637a:	b003      	add	sp, #12
 800637c:	bd30      	pop	{r4, r5, pc}
 800637e:	bf00      	nop
 8006380:	20000018 	.word	0x20000018
 8006384:	2000007c 	.word	0x2000007c

08006388 <__locale_ctype_ptr_l>:
 8006388:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800638c:	4770      	bx	lr

0800638e <__ascii_mbtowc>:
 800638e:	b082      	sub	sp, #8
 8006390:	b901      	cbnz	r1, 8006394 <__ascii_mbtowc+0x6>
 8006392:	a901      	add	r1, sp, #4
 8006394:	b142      	cbz	r2, 80063a8 <__ascii_mbtowc+0x1a>
 8006396:	b14b      	cbz	r3, 80063ac <__ascii_mbtowc+0x1e>
 8006398:	7813      	ldrb	r3, [r2, #0]
 800639a:	600b      	str	r3, [r1, #0]
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	1c10      	adds	r0, r2, #0
 80063a0:	bf18      	it	ne
 80063a2:	2001      	movne	r0, #1
 80063a4:	b002      	add	sp, #8
 80063a6:	4770      	bx	lr
 80063a8:	4610      	mov	r0, r2
 80063aa:	e7fb      	b.n	80063a4 <__ascii_mbtowc+0x16>
 80063ac:	f06f 0001 	mvn.w	r0, #1
 80063b0:	e7f8      	b.n	80063a4 <__ascii_mbtowc+0x16>

080063b2 <__ssputs_r>:
 80063b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b6:	688e      	ldr	r6, [r1, #8]
 80063b8:	429e      	cmp	r6, r3
 80063ba:	4682      	mov	sl, r0
 80063bc:	460c      	mov	r4, r1
 80063be:	4690      	mov	r8, r2
 80063c0:	4699      	mov	r9, r3
 80063c2:	d837      	bhi.n	8006434 <__ssputs_r+0x82>
 80063c4:	898a      	ldrh	r2, [r1, #12]
 80063c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ca:	d031      	beq.n	8006430 <__ssputs_r+0x7e>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	6909      	ldr	r1, [r1, #16]
 80063d0:	1a6f      	subs	r7, r5, r1
 80063d2:	6965      	ldr	r5, [r4, #20]
 80063d4:	2302      	movs	r3, #2
 80063d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063da:	fb95 f5f3 	sdiv	r5, r5, r3
 80063de:	f109 0301 	add.w	r3, r9, #1
 80063e2:	443b      	add	r3, r7
 80063e4:	429d      	cmp	r5, r3
 80063e6:	bf38      	it	cc
 80063e8:	461d      	movcc	r5, r3
 80063ea:	0553      	lsls	r3, r2, #21
 80063ec:	d530      	bpl.n	8006450 <__ssputs_r+0x9e>
 80063ee:	4629      	mov	r1, r5
 80063f0:	f000 fb3a 	bl	8006a68 <_malloc_r>
 80063f4:	4606      	mov	r6, r0
 80063f6:	b950      	cbnz	r0, 800640e <__ssputs_r+0x5c>
 80063f8:	230c      	movs	r3, #12
 80063fa:	f8ca 3000 	str.w	r3, [sl]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	f04f 30ff 	mov.w	r0, #4294967295
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640e:	463a      	mov	r2, r7
 8006410:	6921      	ldr	r1, [r4, #16]
 8006412:	f000 fab6 	bl	8006982 <memcpy>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800641c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	6126      	str	r6, [r4, #16]
 8006424:	6165      	str	r5, [r4, #20]
 8006426:	443e      	add	r6, r7
 8006428:	1bed      	subs	r5, r5, r7
 800642a:	6026      	str	r6, [r4, #0]
 800642c:	60a5      	str	r5, [r4, #8]
 800642e:	464e      	mov	r6, r9
 8006430:	454e      	cmp	r6, r9
 8006432:	d900      	bls.n	8006436 <__ssputs_r+0x84>
 8006434:	464e      	mov	r6, r9
 8006436:	4632      	mov	r2, r6
 8006438:	4641      	mov	r1, r8
 800643a:	6820      	ldr	r0, [r4, #0]
 800643c:	f000 faac 	bl	8006998 <memmove>
 8006440:	68a3      	ldr	r3, [r4, #8]
 8006442:	1b9b      	subs	r3, r3, r6
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	441e      	add	r6, r3
 800644a:	6026      	str	r6, [r4, #0]
 800644c:	2000      	movs	r0, #0
 800644e:	e7dc      	b.n	800640a <__ssputs_r+0x58>
 8006450:	462a      	mov	r2, r5
 8006452:	f000 fb63 	bl	8006b1c <_realloc_r>
 8006456:	4606      	mov	r6, r0
 8006458:	2800      	cmp	r0, #0
 800645a:	d1e2      	bne.n	8006422 <__ssputs_r+0x70>
 800645c:	6921      	ldr	r1, [r4, #16]
 800645e:	4650      	mov	r0, sl
 8006460:	f000 fab4 	bl	80069cc <_free_r>
 8006464:	e7c8      	b.n	80063f8 <__ssputs_r+0x46>
	...

08006468 <_svfiprintf_r>:
 8006468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	461d      	mov	r5, r3
 800646e:	898b      	ldrh	r3, [r1, #12]
 8006470:	061f      	lsls	r7, r3, #24
 8006472:	b09d      	sub	sp, #116	; 0x74
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	4616      	mov	r6, r2
 800647a:	d50f      	bpl.n	800649c <_svfiprintf_r+0x34>
 800647c:	690b      	ldr	r3, [r1, #16]
 800647e:	b96b      	cbnz	r3, 800649c <_svfiprintf_r+0x34>
 8006480:	2140      	movs	r1, #64	; 0x40
 8006482:	f000 faf1 	bl	8006a68 <_malloc_r>
 8006486:	6020      	str	r0, [r4, #0]
 8006488:	6120      	str	r0, [r4, #16]
 800648a:	b928      	cbnz	r0, 8006498 <_svfiprintf_r+0x30>
 800648c:	230c      	movs	r3, #12
 800648e:	f8c8 3000 	str.w	r3, [r8]
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	e0c8      	b.n	800662a <_svfiprintf_r+0x1c2>
 8006498:	2340      	movs	r3, #64	; 0x40
 800649a:	6163      	str	r3, [r4, #20]
 800649c:	2300      	movs	r3, #0
 800649e:	9309      	str	r3, [sp, #36]	; 0x24
 80064a0:	2320      	movs	r3, #32
 80064a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a6:	2330      	movs	r3, #48	; 0x30
 80064a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ac:	9503      	str	r5, [sp, #12]
 80064ae:	f04f 0b01 	mov.w	fp, #1
 80064b2:	4637      	mov	r7, r6
 80064b4:	463d      	mov	r5, r7
 80064b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064ba:	b10b      	cbz	r3, 80064c0 <_svfiprintf_r+0x58>
 80064bc:	2b25      	cmp	r3, #37	; 0x25
 80064be:	d13e      	bne.n	800653e <_svfiprintf_r+0xd6>
 80064c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80064c4:	d00b      	beq.n	80064de <_svfiprintf_r+0x76>
 80064c6:	4653      	mov	r3, sl
 80064c8:	4632      	mov	r2, r6
 80064ca:	4621      	mov	r1, r4
 80064cc:	4640      	mov	r0, r8
 80064ce:	f7ff ff70 	bl	80063b2 <__ssputs_r>
 80064d2:	3001      	adds	r0, #1
 80064d4:	f000 80a4 	beq.w	8006620 <_svfiprintf_r+0x1b8>
 80064d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064da:	4453      	add	r3, sl
 80064dc:	9309      	str	r3, [sp, #36]	; 0x24
 80064de:	783b      	ldrb	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 809d 	beq.w	8006620 <_svfiprintf_r+0x1b8>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	9307      	str	r3, [sp, #28]
 80064f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f8:	931a      	str	r3, [sp, #104]	; 0x68
 80064fa:	462f      	mov	r7, r5
 80064fc:	2205      	movs	r2, #5
 80064fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006502:	4850      	ldr	r0, [pc, #320]	; (8006644 <_svfiprintf_r+0x1dc>)
 8006504:	f7f9 fe84 	bl	8000210 <memchr>
 8006508:	9b04      	ldr	r3, [sp, #16]
 800650a:	b9d0      	cbnz	r0, 8006542 <_svfiprintf_r+0xda>
 800650c:	06d9      	lsls	r1, r3, #27
 800650e:	bf44      	itt	mi
 8006510:	2220      	movmi	r2, #32
 8006512:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006516:	071a      	lsls	r2, r3, #28
 8006518:	bf44      	itt	mi
 800651a:	222b      	movmi	r2, #43	; 0x2b
 800651c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006520:	782a      	ldrb	r2, [r5, #0]
 8006522:	2a2a      	cmp	r2, #42	; 0x2a
 8006524:	d015      	beq.n	8006552 <_svfiprintf_r+0xea>
 8006526:	9a07      	ldr	r2, [sp, #28]
 8006528:	462f      	mov	r7, r5
 800652a:	2000      	movs	r0, #0
 800652c:	250a      	movs	r5, #10
 800652e:	4639      	mov	r1, r7
 8006530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006534:	3b30      	subs	r3, #48	; 0x30
 8006536:	2b09      	cmp	r3, #9
 8006538:	d94d      	bls.n	80065d6 <_svfiprintf_r+0x16e>
 800653a:	b1b8      	cbz	r0, 800656c <_svfiprintf_r+0x104>
 800653c:	e00f      	b.n	800655e <_svfiprintf_r+0xf6>
 800653e:	462f      	mov	r7, r5
 8006540:	e7b8      	b.n	80064b4 <_svfiprintf_r+0x4c>
 8006542:	4a40      	ldr	r2, [pc, #256]	; (8006644 <_svfiprintf_r+0x1dc>)
 8006544:	1a80      	subs	r0, r0, r2
 8006546:	fa0b f000 	lsl.w	r0, fp, r0
 800654a:	4318      	orrs	r0, r3
 800654c:	9004      	str	r0, [sp, #16]
 800654e:	463d      	mov	r5, r7
 8006550:	e7d3      	b.n	80064fa <_svfiprintf_r+0x92>
 8006552:	9a03      	ldr	r2, [sp, #12]
 8006554:	1d11      	adds	r1, r2, #4
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	2a00      	cmp	r2, #0
 800655c:	db01      	blt.n	8006562 <_svfiprintf_r+0xfa>
 800655e:	9207      	str	r2, [sp, #28]
 8006560:	e004      	b.n	800656c <_svfiprintf_r+0x104>
 8006562:	4252      	negs	r2, r2
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	9207      	str	r2, [sp, #28]
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	783b      	ldrb	r3, [r7, #0]
 800656e:	2b2e      	cmp	r3, #46	; 0x2e
 8006570:	d10c      	bne.n	800658c <_svfiprintf_r+0x124>
 8006572:	787b      	ldrb	r3, [r7, #1]
 8006574:	2b2a      	cmp	r3, #42	; 0x2a
 8006576:	d133      	bne.n	80065e0 <_svfiprintf_r+0x178>
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	9203      	str	r2, [sp, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfb8      	it	lt
 8006584:	f04f 33ff 	movlt.w	r3, #4294967295
 8006588:	3702      	adds	r7, #2
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	4d2e      	ldr	r5, [pc, #184]	; (8006648 <_svfiprintf_r+0x1e0>)
 800658e:	7839      	ldrb	r1, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	4628      	mov	r0, r5
 8006594:	f7f9 fe3c 	bl	8000210 <memchr>
 8006598:	b138      	cbz	r0, 80065aa <_svfiprintf_r+0x142>
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	1b40      	subs	r0, r0, r5
 800659e:	fa03 f000 	lsl.w	r0, r3, r0
 80065a2:	9b04      	ldr	r3, [sp, #16]
 80065a4:	4303      	orrs	r3, r0
 80065a6:	3701      	adds	r7, #1
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	7839      	ldrb	r1, [r7, #0]
 80065ac:	4827      	ldr	r0, [pc, #156]	; (800664c <_svfiprintf_r+0x1e4>)
 80065ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065b2:	2206      	movs	r2, #6
 80065b4:	1c7e      	adds	r6, r7, #1
 80065b6:	f7f9 fe2b 	bl	8000210 <memchr>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d038      	beq.n	8006630 <_svfiprintf_r+0x1c8>
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <_svfiprintf_r+0x1e8>)
 80065c0:	bb13      	cbnz	r3, 8006608 <_svfiprintf_r+0x1a0>
 80065c2:	9b03      	ldr	r3, [sp, #12]
 80065c4:	3307      	adds	r3, #7
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	3308      	adds	r3, #8
 80065cc:	9303      	str	r3, [sp, #12]
 80065ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d0:	444b      	add	r3, r9
 80065d2:	9309      	str	r3, [sp, #36]	; 0x24
 80065d4:	e76d      	b.n	80064b2 <_svfiprintf_r+0x4a>
 80065d6:	fb05 3202 	mla	r2, r5, r2, r3
 80065da:	2001      	movs	r0, #1
 80065dc:	460f      	mov	r7, r1
 80065de:	e7a6      	b.n	800652e <_svfiprintf_r+0xc6>
 80065e0:	2300      	movs	r3, #0
 80065e2:	3701      	adds	r7, #1
 80065e4:	9305      	str	r3, [sp, #20]
 80065e6:	4619      	mov	r1, r3
 80065e8:	250a      	movs	r5, #10
 80065ea:	4638      	mov	r0, r7
 80065ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f0:	3a30      	subs	r2, #48	; 0x30
 80065f2:	2a09      	cmp	r2, #9
 80065f4:	d903      	bls.n	80065fe <_svfiprintf_r+0x196>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0c8      	beq.n	800658c <_svfiprintf_r+0x124>
 80065fa:	9105      	str	r1, [sp, #20]
 80065fc:	e7c6      	b.n	800658c <_svfiprintf_r+0x124>
 80065fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006602:	2301      	movs	r3, #1
 8006604:	4607      	mov	r7, r0
 8006606:	e7f0      	b.n	80065ea <_svfiprintf_r+0x182>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	4622      	mov	r2, r4
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <_svfiprintf_r+0x1ec>)
 8006610:	a904      	add	r1, sp, #16
 8006612:	4640      	mov	r0, r8
 8006614:	f3af 8000 	nop.w
 8006618:	f1b0 3fff 	cmp.w	r0, #4294967295
 800661c:	4681      	mov	r9, r0
 800661e:	d1d6      	bne.n	80065ce <_svfiprintf_r+0x166>
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	065b      	lsls	r3, r3, #25
 8006624:	f53f af35 	bmi.w	8006492 <_svfiprintf_r+0x2a>
 8006628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662a:	b01d      	add	sp, #116	; 0x74
 800662c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006630:	ab03      	add	r3, sp, #12
 8006632:	9300      	str	r3, [sp, #0]
 8006634:	4622      	mov	r2, r4
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <_svfiprintf_r+0x1ec>)
 8006638:	a904      	add	r1, sp, #16
 800663a:	4640      	mov	r0, r8
 800663c:	f000 f882 	bl	8006744 <_printf_i>
 8006640:	e7ea      	b.n	8006618 <_svfiprintf_r+0x1b0>
 8006642:	bf00      	nop
 8006644:	08006c0e 	.word	0x08006c0e
 8006648:	08006c14 	.word	0x08006c14
 800664c:	08006c18 	.word	0x08006c18
 8006650:	00000000 	.word	0x00000000
 8006654:	080063b3 	.word	0x080063b3

08006658 <_printf_common>:
 8006658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800665c:	4691      	mov	r9, r2
 800665e:	461f      	mov	r7, r3
 8006660:	688a      	ldr	r2, [r1, #8]
 8006662:	690b      	ldr	r3, [r1, #16]
 8006664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006668:	4293      	cmp	r3, r2
 800666a:	bfb8      	it	lt
 800666c:	4613      	movlt	r3, r2
 800666e:	f8c9 3000 	str.w	r3, [r9]
 8006672:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006676:	4606      	mov	r6, r0
 8006678:	460c      	mov	r4, r1
 800667a:	b112      	cbz	r2, 8006682 <_printf_common+0x2a>
 800667c:	3301      	adds	r3, #1
 800667e:	f8c9 3000 	str.w	r3, [r9]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	0699      	lsls	r1, r3, #26
 8006686:	bf42      	ittt	mi
 8006688:	f8d9 3000 	ldrmi.w	r3, [r9]
 800668c:	3302      	addmi	r3, #2
 800668e:	f8c9 3000 	strmi.w	r3, [r9]
 8006692:	6825      	ldr	r5, [r4, #0]
 8006694:	f015 0506 	ands.w	r5, r5, #6
 8006698:	d107      	bne.n	80066aa <_printf_common+0x52>
 800669a:	f104 0a19 	add.w	sl, r4, #25
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	f8d9 2000 	ldr.w	r2, [r9]
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	42ab      	cmp	r3, r5
 80066a8:	dc28      	bgt.n	80066fc <_printf_common+0xa4>
 80066aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	3300      	adds	r3, #0
 80066b2:	bf18      	it	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	0692      	lsls	r2, r2, #26
 80066b8:	d42d      	bmi.n	8006716 <_printf_common+0xbe>
 80066ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066be:	4639      	mov	r1, r7
 80066c0:	4630      	mov	r0, r6
 80066c2:	47c0      	blx	r8
 80066c4:	3001      	adds	r0, #1
 80066c6:	d020      	beq.n	800670a <_printf_common+0xb2>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	68e5      	ldr	r5, [r4, #12]
 80066cc:	f8d9 2000 	ldr.w	r2, [r9]
 80066d0:	f003 0306 	and.w	r3, r3, #6
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	bf08      	it	eq
 80066d8:	1aad      	subeq	r5, r5, r2
 80066da:	68a3      	ldr	r3, [r4, #8]
 80066dc:	6922      	ldr	r2, [r4, #16]
 80066de:	bf0c      	ite	eq
 80066e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e4:	2500      	movne	r5, #0
 80066e6:	4293      	cmp	r3, r2
 80066e8:	bfc4      	itt	gt
 80066ea:	1a9b      	subgt	r3, r3, r2
 80066ec:	18ed      	addgt	r5, r5, r3
 80066ee:	f04f 0900 	mov.w	r9, #0
 80066f2:	341a      	adds	r4, #26
 80066f4:	454d      	cmp	r5, r9
 80066f6:	d11a      	bne.n	800672e <_printf_common+0xd6>
 80066f8:	2000      	movs	r0, #0
 80066fa:	e008      	b.n	800670e <_printf_common+0xb6>
 80066fc:	2301      	movs	r3, #1
 80066fe:	4652      	mov	r2, sl
 8006700:	4639      	mov	r1, r7
 8006702:	4630      	mov	r0, r6
 8006704:	47c0      	blx	r8
 8006706:	3001      	adds	r0, #1
 8006708:	d103      	bne.n	8006712 <_printf_common+0xba>
 800670a:	f04f 30ff 	mov.w	r0, #4294967295
 800670e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006712:	3501      	adds	r5, #1
 8006714:	e7c3      	b.n	800669e <_printf_common+0x46>
 8006716:	18e1      	adds	r1, r4, r3
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	2030      	movs	r0, #48	; 0x30
 800671c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006720:	4422      	add	r2, r4
 8006722:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800672a:	3302      	adds	r3, #2
 800672c:	e7c5      	b.n	80066ba <_printf_common+0x62>
 800672e:	2301      	movs	r3, #1
 8006730:	4622      	mov	r2, r4
 8006732:	4639      	mov	r1, r7
 8006734:	4630      	mov	r0, r6
 8006736:	47c0      	blx	r8
 8006738:	3001      	adds	r0, #1
 800673a:	d0e6      	beq.n	800670a <_printf_common+0xb2>
 800673c:	f109 0901 	add.w	r9, r9, #1
 8006740:	e7d8      	b.n	80066f4 <_printf_common+0x9c>
	...

08006744 <_printf_i>:
 8006744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006748:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800674c:	460c      	mov	r4, r1
 800674e:	7e09      	ldrb	r1, [r1, #24]
 8006750:	b085      	sub	sp, #20
 8006752:	296e      	cmp	r1, #110	; 0x6e
 8006754:	4617      	mov	r7, r2
 8006756:	4606      	mov	r6, r0
 8006758:	4698      	mov	r8, r3
 800675a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800675c:	f000 80b3 	beq.w	80068c6 <_printf_i+0x182>
 8006760:	d822      	bhi.n	80067a8 <_printf_i+0x64>
 8006762:	2963      	cmp	r1, #99	; 0x63
 8006764:	d036      	beq.n	80067d4 <_printf_i+0x90>
 8006766:	d80a      	bhi.n	800677e <_printf_i+0x3a>
 8006768:	2900      	cmp	r1, #0
 800676a:	f000 80b9 	beq.w	80068e0 <_printf_i+0x19c>
 800676e:	2958      	cmp	r1, #88	; 0x58
 8006770:	f000 8083 	beq.w	800687a <_printf_i+0x136>
 8006774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006778:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800677c:	e032      	b.n	80067e4 <_printf_i+0xa0>
 800677e:	2964      	cmp	r1, #100	; 0x64
 8006780:	d001      	beq.n	8006786 <_printf_i+0x42>
 8006782:	2969      	cmp	r1, #105	; 0x69
 8006784:	d1f6      	bne.n	8006774 <_printf_i+0x30>
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	6813      	ldr	r3, [r2, #0]
 800678a:	0605      	lsls	r5, r0, #24
 800678c:	f103 0104 	add.w	r1, r3, #4
 8006790:	d52a      	bpl.n	80067e8 <_printf_i+0xa4>
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6011      	str	r1, [r2, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da03      	bge.n	80067a2 <_printf_i+0x5e>
 800679a:	222d      	movs	r2, #45	; 0x2d
 800679c:	425b      	negs	r3, r3
 800679e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80067a2:	486f      	ldr	r0, [pc, #444]	; (8006960 <_printf_i+0x21c>)
 80067a4:	220a      	movs	r2, #10
 80067a6:	e039      	b.n	800681c <_printf_i+0xd8>
 80067a8:	2973      	cmp	r1, #115	; 0x73
 80067aa:	f000 809d 	beq.w	80068e8 <_printf_i+0x1a4>
 80067ae:	d808      	bhi.n	80067c2 <_printf_i+0x7e>
 80067b0:	296f      	cmp	r1, #111	; 0x6f
 80067b2:	d020      	beq.n	80067f6 <_printf_i+0xb2>
 80067b4:	2970      	cmp	r1, #112	; 0x70
 80067b6:	d1dd      	bne.n	8006774 <_printf_i+0x30>
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	f043 0320 	orr.w	r3, r3, #32
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	e003      	b.n	80067ca <_printf_i+0x86>
 80067c2:	2975      	cmp	r1, #117	; 0x75
 80067c4:	d017      	beq.n	80067f6 <_printf_i+0xb2>
 80067c6:	2978      	cmp	r1, #120	; 0x78
 80067c8:	d1d4      	bne.n	8006774 <_printf_i+0x30>
 80067ca:	2378      	movs	r3, #120	; 0x78
 80067cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067d0:	4864      	ldr	r0, [pc, #400]	; (8006964 <_printf_i+0x220>)
 80067d2:	e055      	b.n	8006880 <_printf_i+0x13c>
 80067d4:	6813      	ldr	r3, [r2, #0]
 80067d6:	1d19      	adds	r1, r3, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6011      	str	r1, [r2, #0]
 80067dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e4:	2301      	movs	r3, #1
 80067e6:	e08c      	b.n	8006902 <_printf_i+0x1be>
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6011      	str	r1, [r2, #0]
 80067ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067f0:	bf18      	it	ne
 80067f2:	b21b      	sxthne	r3, r3
 80067f4:	e7cf      	b.n	8006796 <_printf_i+0x52>
 80067f6:	6813      	ldr	r3, [r2, #0]
 80067f8:	6825      	ldr	r5, [r4, #0]
 80067fa:	1d18      	adds	r0, r3, #4
 80067fc:	6010      	str	r0, [r2, #0]
 80067fe:	0628      	lsls	r0, r5, #24
 8006800:	d501      	bpl.n	8006806 <_printf_i+0xc2>
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	e002      	b.n	800680c <_printf_i+0xc8>
 8006806:	0668      	lsls	r0, r5, #25
 8006808:	d5fb      	bpl.n	8006802 <_printf_i+0xbe>
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	4854      	ldr	r0, [pc, #336]	; (8006960 <_printf_i+0x21c>)
 800680e:	296f      	cmp	r1, #111	; 0x6f
 8006810:	bf14      	ite	ne
 8006812:	220a      	movne	r2, #10
 8006814:	2208      	moveq	r2, #8
 8006816:	2100      	movs	r1, #0
 8006818:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800681c:	6865      	ldr	r5, [r4, #4]
 800681e:	60a5      	str	r5, [r4, #8]
 8006820:	2d00      	cmp	r5, #0
 8006822:	f2c0 8095 	blt.w	8006950 <_printf_i+0x20c>
 8006826:	6821      	ldr	r1, [r4, #0]
 8006828:	f021 0104 	bic.w	r1, r1, #4
 800682c:	6021      	str	r1, [r4, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d13d      	bne.n	80068ae <_printf_i+0x16a>
 8006832:	2d00      	cmp	r5, #0
 8006834:	f040 808e 	bne.w	8006954 <_printf_i+0x210>
 8006838:	4665      	mov	r5, ip
 800683a:	2a08      	cmp	r2, #8
 800683c:	d10b      	bne.n	8006856 <_printf_i+0x112>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	07db      	lsls	r3, r3, #31
 8006842:	d508      	bpl.n	8006856 <_printf_i+0x112>
 8006844:	6923      	ldr	r3, [r4, #16]
 8006846:	6862      	ldr	r2, [r4, #4]
 8006848:	429a      	cmp	r2, r3
 800684a:	bfde      	ittt	le
 800684c:	2330      	movle	r3, #48	; 0x30
 800684e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006852:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006856:	ebac 0305 	sub.w	r3, ip, r5
 800685a:	6123      	str	r3, [r4, #16]
 800685c:	f8cd 8000 	str.w	r8, [sp]
 8006860:	463b      	mov	r3, r7
 8006862:	aa03      	add	r2, sp, #12
 8006864:	4621      	mov	r1, r4
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff fef6 	bl	8006658 <_printf_common>
 800686c:	3001      	adds	r0, #1
 800686e:	d14d      	bne.n	800690c <_printf_i+0x1c8>
 8006870:	f04f 30ff 	mov.w	r0, #4294967295
 8006874:	b005      	add	sp, #20
 8006876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800687a:	4839      	ldr	r0, [pc, #228]	; (8006960 <_printf_i+0x21c>)
 800687c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006880:	6813      	ldr	r3, [r2, #0]
 8006882:	6821      	ldr	r1, [r4, #0]
 8006884:	1d1d      	adds	r5, r3, #4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6015      	str	r5, [r2, #0]
 800688a:	060a      	lsls	r2, r1, #24
 800688c:	d50b      	bpl.n	80068a6 <_printf_i+0x162>
 800688e:	07ca      	lsls	r2, r1, #31
 8006890:	bf44      	itt	mi
 8006892:	f041 0120 	orrmi.w	r1, r1, #32
 8006896:	6021      	strmi	r1, [r4, #0]
 8006898:	b91b      	cbnz	r3, 80068a2 <_printf_i+0x15e>
 800689a:	6822      	ldr	r2, [r4, #0]
 800689c:	f022 0220 	bic.w	r2, r2, #32
 80068a0:	6022      	str	r2, [r4, #0]
 80068a2:	2210      	movs	r2, #16
 80068a4:	e7b7      	b.n	8006816 <_printf_i+0xd2>
 80068a6:	064d      	lsls	r5, r1, #25
 80068a8:	bf48      	it	mi
 80068aa:	b29b      	uxthmi	r3, r3
 80068ac:	e7ef      	b.n	800688e <_printf_i+0x14a>
 80068ae:	4665      	mov	r5, ip
 80068b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80068b4:	fb02 3311 	mls	r3, r2, r1, r3
 80068b8:	5cc3      	ldrb	r3, [r0, r3]
 80068ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80068be:	460b      	mov	r3, r1
 80068c0:	2900      	cmp	r1, #0
 80068c2:	d1f5      	bne.n	80068b0 <_printf_i+0x16c>
 80068c4:	e7b9      	b.n	800683a <_printf_i+0xf6>
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	6961      	ldr	r1, [r4, #20]
 80068cc:	1d18      	adds	r0, r3, #4
 80068ce:	6010      	str	r0, [r2, #0]
 80068d0:	0628      	lsls	r0, r5, #24
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	d501      	bpl.n	80068da <_printf_i+0x196>
 80068d6:	6019      	str	r1, [r3, #0]
 80068d8:	e002      	b.n	80068e0 <_printf_i+0x19c>
 80068da:	066a      	lsls	r2, r5, #25
 80068dc:	d5fb      	bpl.n	80068d6 <_printf_i+0x192>
 80068de:	8019      	strh	r1, [r3, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	6123      	str	r3, [r4, #16]
 80068e4:	4665      	mov	r5, ip
 80068e6:	e7b9      	b.n	800685c <_printf_i+0x118>
 80068e8:	6813      	ldr	r3, [r2, #0]
 80068ea:	1d19      	adds	r1, r3, #4
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	681d      	ldr	r5, [r3, #0]
 80068f0:	6862      	ldr	r2, [r4, #4]
 80068f2:	2100      	movs	r1, #0
 80068f4:	4628      	mov	r0, r5
 80068f6:	f7f9 fc8b 	bl	8000210 <memchr>
 80068fa:	b108      	cbz	r0, 8006900 <_printf_i+0x1bc>
 80068fc:	1b40      	subs	r0, r0, r5
 80068fe:	6060      	str	r0, [r4, #4]
 8006900:	6863      	ldr	r3, [r4, #4]
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	2300      	movs	r3, #0
 8006906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800690a:	e7a7      	b.n	800685c <_printf_i+0x118>
 800690c:	6923      	ldr	r3, [r4, #16]
 800690e:	462a      	mov	r2, r5
 8006910:	4639      	mov	r1, r7
 8006912:	4630      	mov	r0, r6
 8006914:	47c0      	blx	r8
 8006916:	3001      	adds	r0, #1
 8006918:	d0aa      	beq.n	8006870 <_printf_i+0x12c>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	079b      	lsls	r3, r3, #30
 800691e:	d413      	bmi.n	8006948 <_printf_i+0x204>
 8006920:	68e0      	ldr	r0, [r4, #12]
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	4298      	cmp	r0, r3
 8006926:	bfb8      	it	lt
 8006928:	4618      	movlt	r0, r3
 800692a:	e7a3      	b.n	8006874 <_printf_i+0x130>
 800692c:	2301      	movs	r3, #1
 800692e:	464a      	mov	r2, r9
 8006930:	4639      	mov	r1, r7
 8006932:	4630      	mov	r0, r6
 8006934:	47c0      	blx	r8
 8006936:	3001      	adds	r0, #1
 8006938:	d09a      	beq.n	8006870 <_printf_i+0x12c>
 800693a:	3501      	adds	r5, #1
 800693c:	68e3      	ldr	r3, [r4, #12]
 800693e:	9a03      	ldr	r2, [sp, #12]
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	42ab      	cmp	r3, r5
 8006944:	dcf2      	bgt.n	800692c <_printf_i+0x1e8>
 8006946:	e7eb      	b.n	8006920 <_printf_i+0x1dc>
 8006948:	2500      	movs	r5, #0
 800694a:	f104 0919 	add.w	r9, r4, #25
 800694e:	e7f5      	b.n	800693c <_printf_i+0x1f8>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1ac      	bne.n	80068ae <_printf_i+0x16a>
 8006954:	7803      	ldrb	r3, [r0, #0]
 8006956:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800695a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800695e:	e76c      	b.n	800683a <_printf_i+0xf6>
 8006960:	08006c1f 	.word	0x08006c1f
 8006964:	08006c30 	.word	0x08006c30

08006968 <__ascii_wctomb>:
 8006968:	b149      	cbz	r1, 800697e <__ascii_wctomb+0x16>
 800696a:	2aff      	cmp	r2, #255	; 0xff
 800696c:	bf85      	ittet	hi
 800696e:	238a      	movhi	r3, #138	; 0x8a
 8006970:	6003      	strhi	r3, [r0, #0]
 8006972:	700a      	strbls	r2, [r1, #0]
 8006974:	f04f 30ff 	movhi.w	r0, #4294967295
 8006978:	bf98      	it	ls
 800697a:	2001      	movls	r0, #1
 800697c:	4770      	bx	lr
 800697e:	4608      	mov	r0, r1
 8006980:	4770      	bx	lr

08006982 <memcpy>:
 8006982:	b510      	push	{r4, lr}
 8006984:	1e43      	subs	r3, r0, #1
 8006986:	440a      	add	r2, r1
 8006988:	4291      	cmp	r1, r2
 800698a:	d100      	bne.n	800698e <memcpy+0xc>
 800698c:	bd10      	pop	{r4, pc}
 800698e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006992:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006996:	e7f7      	b.n	8006988 <memcpy+0x6>

08006998 <memmove>:
 8006998:	4288      	cmp	r0, r1
 800699a:	b510      	push	{r4, lr}
 800699c:	eb01 0302 	add.w	r3, r1, r2
 80069a0:	d807      	bhi.n	80069b2 <memmove+0x1a>
 80069a2:	1e42      	subs	r2, r0, #1
 80069a4:	4299      	cmp	r1, r3
 80069a6:	d00a      	beq.n	80069be <memmove+0x26>
 80069a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80069b0:	e7f8      	b.n	80069a4 <memmove+0xc>
 80069b2:	4283      	cmp	r3, r0
 80069b4:	d9f5      	bls.n	80069a2 <memmove+0xa>
 80069b6:	1881      	adds	r1, r0, r2
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	42d3      	cmn	r3, r2
 80069bc:	d100      	bne.n	80069c0 <memmove+0x28>
 80069be:	bd10      	pop	{r4, pc}
 80069c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80069c8:	e7f7      	b.n	80069ba <memmove+0x22>
	...

080069cc <_free_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	4605      	mov	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d045      	beq.n	8006a60 <_free_r+0x94>
 80069d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069d8:	1f0c      	subs	r4, r1, #4
 80069da:	2b00      	cmp	r3, #0
 80069dc:	bfb8      	it	lt
 80069de:	18e4      	addlt	r4, r4, r3
 80069e0:	f000 f8d2 	bl	8006b88 <__malloc_lock>
 80069e4:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <_free_r+0x98>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	4610      	mov	r0, r2
 80069ea:	b933      	cbnz	r3, 80069fa <_free_r+0x2e>
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6014      	str	r4, [r2, #0]
 80069f0:	4628      	mov	r0, r5
 80069f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069f6:	f000 b8c8 	b.w	8006b8a <__malloc_unlock>
 80069fa:	42a3      	cmp	r3, r4
 80069fc:	d90c      	bls.n	8006a18 <_free_r+0x4c>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	1862      	adds	r2, r4, r1
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bf04      	itt	eq
 8006a06:	681a      	ldreq	r2, [r3, #0]
 8006a08:	685b      	ldreq	r3, [r3, #4]
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	bf04      	itt	eq
 8006a0e:	1852      	addeq	r2, r2, r1
 8006a10:	6022      	streq	r2, [r4, #0]
 8006a12:	6004      	str	r4, [r0, #0]
 8006a14:	e7ec      	b.n	80069f0 <_free_r+0x24>
 8006a16:	4613      	mov	r3, r2
 8006a18:	685a      	ldr	r2, [r3, #4]
 8006a1a:	b10a      	cbz	r2, 8006a20 <_free_r+0x54>
 8006a1c:	42a2      	cmp	r2, r4
 8006a1e:	d9fa      	bls.n	8006a16 <_free_r+0x4a>
 8006a20:	6819      	ldr	r1, [r3, #0]
 8006a22:	1858      	adds	r0, r3, r1
 8006a24:	42a0      	cmp	r0, r4
 8006a26:	d10b      	bne.n	8006a40 <_free_r+0x74>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	1858      	adds	r0, r3, r1
 8006a2e:	4282      	cmp	r2, r0
 8006a30:	6019      	str	r1, [r3, #0]
 8006a32:	d1dd      	bne.n	80069f0 <_free_r+0x24>
 8006a34:	6810      	ldr	r0, [r2, #0]
 8006a36:	6852      	ldr	r2, [r2, #4]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	4401      	add	r1, r0
 8006a3c:	6019      	str	r1, [r3, #0]
 8006a3e:	e7d7      	b.n	80069f0 <_free_r+0x24>
 8006a40:	d902      	bls.n	8006a48 <_free_r+0x7c>
 8006a42:	230c      	movs	r3, #12
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	e7d3      	b.n	80069f0 <_free_r+0x24>
 8006a48:	6820      	ldr	r0, [r4, #0]
 8006a4a:	1821      	adds	r1, r4, r0
 8006a4c:	428a      	cmp	r2, r1
 8006a4e:	bf04      	itt	eq
 8006a50:	6811      	ldreq	r1, [r2, #0]
 8006a52:	6852      	ldreq	r2, [r2, #4]
 8006a54:	6062      	str	r2, [r4, #4]
 8006a56:	bf04      	itt	eq
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	605c      	str	r4, [r3, #4]
 8006a5e:	e7c7      	b.n	80069f0 <_free_r+0x24>
 8006a60:	bd38      	pop	{r3, r4, r5, pc}
 8006a62:	bf00      	nop
 8006a64:	20000210 	.word	0x20000210

08006a68 <_malloc_r>:
 8006a68:	b570      	push	{r4, r5, r6, lr}
 8006a6a:	1ccd      	adds	r5, r1, #3
 8006a6c:	f025 0503 	bic.w	r5, r5, #3
 8006a70:	3508      	adds	r5, #8
 8006a72:	2d0c      	cmp	r5, #12
 8006a74:	bf38      	it	cc
 8006a76:	250c      	movcc	r5, #12
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	db01      	blt.n	8006a82 <_malloc_r+0x1a>
 8006a7e:	42a9      	cmp	r1, r5
 8006a80:	d903      	bls.n	8006a8a <_malloc_r+0x22>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6033      	str	r3, [r6, #0]
 8006a86:	2000      	movs	r0, #0
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	f000 f87d 	bl	8006b88 <__malloc_lock>
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <_malloc_r+0xac>)
 8006a90:	6814      	ldr	r4, [r2, #0]
 8006a92:	4621      	mov	r1, r4
 8006a94:	b991      	cbnz	r1, 8006abc <_malloc_r+0x54>
 8006a96:	4c20      	ldr	r4, [pc, #128]	; (8006b18 <_malloc_r+0xb0>)
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	b91b      	cbnz	r3, 8006aa4 <_malloc_r+0x3c>
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f000 f863 	bl	8006b68 <_sbrk_r>
 8006aa2:	6020      	str	r0, [r4, #0]
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	f000 f85e 	bl	8006b68 <_sbrk_r>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d124      	bne.n	8006afa <_malloc_r+0x92>
 8006ab0:	230c      	movs	r3, #12
 8006ab2:	6033      	str	r3, [r6, #0]
 8006ab4:	4630      	mov	r0, r6
 8006ab6:	f000 f868 	bl	8006b8a <__malloc_unlock>
 8006aba:	e7e4      	b.n	8006a86 <_malloc_r+0x1e>
 8006abc:	680b      	ldr	r3, [r1, #0]
 8006abe:	1b5b      	subs	r3, r3, r5
 8006ac0:	d418      	bmi.n	8006af4 <_malloc_r+0x8c>
 8006ac2:	2b0b      	cmp	r3, #11
 8006ac4:	d90f      	bls.n	8006ae6 <_malloc_r+0x7e>
 8006ac6:	600b      	str	r3, [r1, #0]
 8006ac8:	50cd      	str	r5, [r1, r3]
 8006aca:	18cc      	adds	r4, r1, r3
 8006acc:	4630      	mov	r0, r6
 8006ace:	f000 f85c 	bl	8006b8a <__malloc_unlock>
 8006ad2:	f104 000b 	add.w	r0, r4, #11
 8006ad6:	1d23      	adds	r3, r4, #4
 8006ad8:	f020 0007 	bic.w	r0, r0, #7
 8006adc:	1ac3      	subs	r3, r0, r3
 8006ade:	d0d3      	beq.n	8006a88 <_malloc_r+0x20>
 8006ae0:	425a      	negs	r2, r3
 8006ae2:	50e2      	str	r2, [r4, r3]
 8006ae4:	e7d0      	b.n	8006a88 <_malloc_r+0x20>
 8006ae6:	428c      	cmp	r4, r1
 8006ae8:	684b      	ldr	r3, [r1, #4]
 8006aea:	bf16      	itet	ne
 8006aec:	6063      	strne	r3, [r4, #4]
 8006aee:	6013      	streq	r3, [r2, #0]
 8006af0:	460c      	movne	r4, r1
 8006af2:	e7eb      	b.n	8006acc <_malloc_r+0x64>
 8006af4:	460c      	mov	r4, r1
 8006af6:	6849      	ldr	r1, [r1, #4]
 8006af8:	e7cc      	b.n	8006a94 <_malloc_r+0x2c>
 8006afa:	1cc4      	adds	r4, r0, #3
 8006afc:	f024 0403 	bic.w	r4, r4, #3
 8006b00:	42a0      	cmp	r0, r4
 8006b02:	d005      	beq.n	8006b10 <_malloc_r+0xa8>
 8006b04:	1a21      	subs	r1, r4, r0
 8006b06:	4630      	mov	r0, r6
 8006b08:	f000 f82e 	bl	8006b68 <_sbrk_r>
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	d0cf      	beq.n	8006ab0 <_malloc_r+0x48>
 8006b10:	6025      	str	r5, [r4, #0]
 8006b12:	e7db      	b.n	8006acc <_malloc_r+0x64>
 8006b14:	20000210 	.word	0x20000210
 8006b18:	20000214 	.word	0x20000214

08006b1c <_realloc_r>:
 8006b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1e:	4607      	mov	r7, r0
 8006b20:	4614      	mov	r4, r2
 8006b22:	460e      	mov	r6, r1
 8006b24:	b921      	cbnz	r1, 8006b30 <_realloc_r+0x14>
 8006b26:	4611      	mov	r1, r2
 8006b28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b2c:	f7ff bf9c 	b.w	8006a68 <_malloc_r>
 8006b30:	b922      	cbnz	r2, 8006b3c <_realloc_r+0x20>
 8006b32:	f7ff ff4b 	bl	80069cc <_free_r>
 8006b36:	4625      	mov	r5, r4
 8006b38:	4628      	mov	r0, r5
 8006b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b3c:	f000 f826 	bl	8006b8c <_malloc_usable_size_r>
 8006b40:	42a0      	cmp	r0, r4
 8006b42:	d20f      	bcs.n	8006b64 <_realloc_r+0x48>
 8006b44:	4621      	mov	r1, r4
 8006b46:	4638      	mov	r0, r7
 8006b48:	f7ff ff8e 	bl	8006a68 <_malloc_r>
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d0f2      	beq.n	8006b38 <_realloc_r+0x1c>
 8006b52:	4631      	mov	r1, r6
 8006b54:	4622      	mov	r2, r4
 8006b56:	f7ff ff14 	bl	8006982 <memcpy>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff ff35 	bl	80069cc <_free_r>
 8006b62:	e7e9      	b.n	8006b38 <_realloc_r+0x1c>
 8006b64:	4635      	mov	r5, r6
 8006b66:	e7e7      	b.n	8006b38 <_realloc_r+0x1c>

08006b68 <_sbrk_r>:
 8006b68:	b538      	push	{r3, r4, r5, lr}
 8006b6a:	4c06      	ldr	r4, [pc, #24]	; (8006b84 <_sbrk_r+0x1c>)
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4605      	mov	r5, r0
 8006b70:	4608      	mov	r0, r1
 8006b72:	6023      	str	r3, [r4, #0]
 8006b74:	f7fe ff32 	bl	80059dc <_sbrk>
 8006b78:	1c43      	adds	r3, r0, #1
 8006b7a:	d102      	bne.n	8006b82 <_sbrk_r+0x1a>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	b103      	cbz	r3, 8006b82 <_sbrk_r+0x1a>
 8006b80:	602b      	str	r3, [r5, #0]
 8006b82:	bd38      	pop	{r3, r4, r5, pc}
 8006b84:	20000878 	.word	0x20000878

08006b88 <__malloc_lock>:
 8006b88:	4770      	bx	lr

08006b8a <__malloc_unlock>:
 8006b8a:	4770      	bx	lr

08006b8c <_malloc_usable_size_r>:
 8006b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b90:	1f18      	subs	r0, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bfbc      	itt	lt
 8006b96:	580b      	ldrlt	r3, [r1, r0]
 8006b98:	18c0      	addlt	r0, r0, r3
 8006b9a:	4770      	bx	lr

08006b9c <_init>:
 8006b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9e:	bf00      	nop
 8006ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba2:	bc08      	pop	{r3}
 8006ba4:	469e      	mov	lr, r3
 8006ba6:	4770      	bx	lr

08006ba8 <_fini>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	bf00      	nop
 8006bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bae:	bc08      	pop	{r3}
 8006bb0:	469e      	mov	lr, r3
 8006bb2:	4770      	bx	lr
